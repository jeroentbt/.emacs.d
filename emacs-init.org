#+TITLE: Emacs Org Configuration
#+STARTUP: indent content
#+FILETAGS: emacsd

This file is tangled by init.el using =org-babel-load-file=. This generates =emacs-init.el= from the =emacs-lisp= source blocks.

* The config

** Package managment and installation
*** Package loading and setup wih =use-package=
#+BEGIN_SRC emacs-lisp :tangle yes
  (package-install 'use-package)
  (eval-when-compile
    (require 'use-package))
#+END_SRC

Use package can ensure a package is installed by using the =:ensure= keyword.
The following sets this up globally. Every package initiated by use-package will be installed when not present.

#+begin_src emacs-lisp :tangle yes
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src
*** Local or remote source with Quelpa
#+begin_src emacs-lisp :tangle yes
  (use-package quelpa)
  (use-package quelpa-use-package)
#+end_src
*** paradox (modernised package-menu)
With paradox enabled, just call the regular =M-x list-packages= to get the better interface.
If you would like to use the regular one, just call =M-x paradox-disable=.

Press "h" for help to see interactive features

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package paradox
    :config
    (paradox-enable))
#+END_SRC
** System
First find out wether we're working on OSX or not

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Are we on a mac?
  (setq is-osx (equal system-type 'darwin))

  ;; On OS X GUI applications do not inherit variables from the shell
  ;; configuration and thus have a different $PATH
  ;; test by doing "M-: (executable-find "flake8")"
  ;; C-h v exec-path
  (when is-osx (progn (use-package exec-path-from-shell
                                   :init
                                   (exec-path-from-shell-initialize))

                      ;; This is for mu4e to be able to get gpg going (sig verifying etc)
                      ;; I was unable to M-x getenv RET GPG_AGENT_INFO (even if I manually set it,
                      ;; as gpg-agent form gpgtools.org does not export this)
                      ;; M-x shell-copy-environment-variable was no help either
                      ;; This should be no problem in *nix's
                      (setenv "GPG_AGENT_INFO" "~/.gnupg/S.gpg-agent")

                      ;; switch modifiers in system prefs
                      ;; (setq mac-option-modifier 'super)
                      ;; (setq mac-command-modifier 'meta)
                      (setq ns-function-modifier 'hyper)

                      ;; Ignore .DS_Store files with ido mode
                      (add-to-list 'ido-ignore-files "\\.DS_Store")))

#+END_SRC

*** File Paths
**** TODO Load paths
Disabled for now
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'load-path (expand-file-name "vendor"
                                            user-emacs-directory))
  (add-to-list 'custom-theme-load-path (expand-file-name "vendor/themes"
                                                         user-emacs-directory))
#+END_SRC
** General dependencies
Some dependencies used by other packages

#+begin_src emacs-lisp :tangle yes
  (use-package async)
#+end_src

** Basics
Some essential customizations.
*** The custom customizations
Emacs let's you use the /customize/ interface to change things up.
Using the following code we make sure everything gets put in and loaded from the correct file.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Use a custom.el file for customizations and load it
  (setq custom-file (expand-file-name "custom.el"
                                      user-emacs-directory))
  (load custom-file)

#+END_SRC
*** Binding keys
[[https://github.com/noctuid/general.el#about][General]] provides a convenient method for binding keys.
#+begin_src emacs-lisp :tangle yes
  (use-package general
    :config
    (global-unset-key (kbd "M-SPC"))
    (general-create-definer keys/prefix/emspace
      :prefix "M-SPC"))
#+end_src

**** usage                                                            :usage:
=M-x general-describe-keybindings=

*** The interface
**** Remove UI components
We defined earlier whether we are running on OSX. The variable =window-system= tells us in which window system we're running, if at all.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Turn off mouse interface early in startup to avoid momentary display
  ;; menu can exist on osx when run as cocoa app
  (if (and is-osx (eq window-system "ns"))
      (if (fboundp 'menu-bar-mode) (menu-bar-mode t))
      (if (fboundp 'menu-bar-mode) (menu-bar-mode -1)))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

**** Interface defaults
Some sensible defaults

***** No splash on startup
Will default to the [[**scratch* buffer][*scratch* buffer]]
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-message t)
#+end_src
***** *scratch* buffer
Use Org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message
        "#+TITLE: Scratch \n*this buffer will self destruct!* \n\n")
#+end_src

***** Set frame title
A bit of a more verbose frame title.
#+begin_src emacs-lisp :tangle no
  (setq frame-title-format (list '(buffer-file-name "%f" ("%b"))
                                 " -- "
                                 '("" invocation-name "@" system-name)))
#+end_src

****** =list= is needed to flatten the sub-lists                      :elisp:

***** Visible bell
don't beep, flash the screen
#+begin_src emacs-lisp :tangle yes
  (setq visible-bell t)
#+end_src
***** the rest

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; don't beep but flash the screen
  ;; font-lock-mode provides the colors for spec languages, set max fontification (1-3)
  ;; force color theme (no increments)
  ;; don't truncate on partial width
  (setq font-lock-maximum-decoration t
        color-theme-is-global t
        truncate-partial-width-windows nil)

  ;; Enable syntax highlighting for older Emacsen that have it off
  (global-font-lock-mode t)

  ;; Highlight current line
  (global-hl-line-mode 1)

  ;; Don't defer screen updates when performing operations
  (setq redisplay-dont-pause t)

  ;; Highlight matching parentheses when the point is on them.
  (show-paren-mode 1)

  (blink-cursor-mode -1)

  ;; Show active region
  (transient-mark-mode 1)
  (make-variable-buffer-local 'transient-mark-mode)
  (put 'transient-mark-mode 'permanent-local t)
  (setq-default transient-mark-mode t)


  ;; Show me empty lines after buffer end
  (set-default 'indicate-empty-lines t)

  ;; smaller cursor
  (setq cursor-type 'bar)

  ;; Use the x clipboard (should have been enabled by default)
  (setq x-select-enable-clipboard t)

  ;; after mouse selection in X11, you can paste by `yank' in emacs
  (setq x-select-enable-primary t)

  ;; faster keystroke echo (shows you what command you're typing)
  (setq echo-keystrokes 0.1)
#+END_SRC

**** Appearance
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist '(font . "SauceCodePro Nerd Font-12"))
  
  ;; set a default fontset to use for displaying unicode characters
  (set-fontset-font "fontset-default" nil
                    "Noto" nil 'append)
  (set-fontset-font "fontset-default" 'symbol
                    "Noto Sans Symbols2" nil 'append)
  (set-fontset-font "fontset-default" 'symbol
                    "NotoEmoji Nerd Font Mono" nil 'prepend)
  (set-fontset-font "fontset-default" 'symbol
                    "Noto Color Emoji" nil 'append)
  (set-fontset-font "fontset-default" nil
                    "DejaVu" nil 'append)

  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "ETBembo"
                         :height 170
                         :weight light))))
   '(fixed-pitch ((t ( :family "SauceCodePro Nerd Font"
                       :height 140)))))
  
#+END_SRC

***** Set font (size) interactively                               :usage:
Interactively set font by calling =M-x menu-set-font=.
Increase font size: C-x C-+
Decrease font size: C-x C--
Restore default:    C-x C-0

***** Icons!

[[https://github.com/domtronn/all-the-icons.el][A utility package to collect various Icon Fonts and propertize them within Emacs.]]
#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons)
#+end_src

After first installation, you will need to install the required fonts
#+begin_example emacs-lisp
  M-x all-the-icons-install-fonts
#+end_example
***** Theme
#+begin_src emacs-lisp :tangle yes
    (use-package modus-themes
      :init
      ;; Add all your customizations prior to loading the themes
      (setq modus-themes-italic-constructs t
            modus-themes-bold-constructs nil
            modus-themes-mixed-fonts t
            modus-themes-subtle-line-numbers t
            modus-themes-intense-markup t
            modus-themes-success-deuteranopia t
            modus-themes-fringes nil ; {nil,'subtle,'intense}
            modus-themes-lang-checkers 'faint
            modus-themes-mode-line '(padded accented borderless)
            modus-themes-mode-line-padding 3
            modus-themes-syntax 'faint
            modus-themes-hl-line '(underline accented)
            modus-themes-paren-match '(bold intense)
            modus-themes-links nil
            modus-themes-prompts '(intense bold)
            modus-themes-completions 'moderate ; try some {nil,'moderate,'opinionated}
            modus-themes-mail-citations nil
            modus-themes-region '(bg-only no-extend)
            ;; Options for `modus-themes-diffs': nil, 'desaturated,
            ;; 'bg-only, 'deuteranopia, 'fg-only-deuteranopia
            modus-themes-diffs 'deuteranopia
            modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}
            modus-themes-org-agenda
            '((header-block . (variable-pitch scale-title))
              (header-date . (grayscale bold-today underline-today scale-heading))
              (event . (varied scale-small))
              (scheduled . rainbow)
              (habit . traffic-light-deuteranopia))

            modus-themes-headings
            '((1 . (overline background))
              (2 . (overline))
              (t . (semibold)))

            modus-themes-variable-pitch-headings t
            modus-themes-scale-headings t
            modus-themes-scale-1 1.1
            modus-themes-scale-2 1.15
            modus-themes-scale-3 1.21
            modus-themes-scale-4 1.27
            modus-themes-scale-title 1.33)

      ;; Load the theme files before enabling a theme
      (modus-themes-load-themes)
      :config
      ;; Load the theme of your choice:
      ;; (modus-themes-load-operandi)
      (modus-themes-load-vivendi)
      :bind ("<f5>" . modus-themes-toggle))
#+end_src
**** Mode Line

I'm using [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]] to build me a nice mode-line.
To clean up some minor modes indicators, [[http://www.emacswiki.org/emacs/DiminishedModes][diminish.el]] is used. This could potentially be replaced by [[https://github.com/Malabarba/rich-minority][rich-minority]].

#+BEGIN_SRC emacs-lisp :tangle yes
  ;;(size-indication-mode t)
  (setq column-number-mode t)
  (use-package diminish)
  (use-package smart-mode-line
               :requires diminish
               :config
                   (setq sml/theme 'respectful)
                   (sml/setup)

                   ;; replace common paths
                   (add-to-list 'sml/replacer-regexp-list '("^~/Projects/" ":P:"))
                   (add-to-list 'sml/replacer-regexp-list '("^:P:Code" ":C:") t)

                   (setq sml/projectile-replacement-format "[%s]")
                   (setq sml/use-projectile-p 'before-prefixes)

                   ;; Major mode stays left, everything after gets alligned right
                   (setq sml/mode-width 'right)
                   ;; Set min and max buffer name length
                   (setq sml/name-width '(12 . 44))
                   (setq sml/shorten-modes t)
                   (setq sml/shorten-directory t)

                   ;; hide minor modes
                   (eval-after-load "Projectile" '(diminish 'projectile-mode))
                   (eval-after-load "Guide-Key" '(diminish 'guide-key-mode))
                   (eval-after-load "Magit-Auto-Revert" '(diminish 'magit-auto-revert-mode))
                   (eval-after-load "subword" '(diminish 'subword-mode))
                   (eval-after-load "smartparens" '(diminish 'smartparens-mode "(")))
#+END_SRC
**** Windows
***** ace-window
Ace-window offers an ace-jump like interface for jumping to, switching and deleting windows.

n key (as well as another call of M-o) will switch to the previous window

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-window
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
          aw-background nil)
    (custom-set-faces
     '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    :general
    ("M-o" 'ace-window))
#+end_src
****** ace-window usage                                               :usage:
- /C-u M-o/ :: 1 universal argument moves current and called window
- /C-u C-u M-o/ :: 2 universal arguments deletes called window
or use the dispatch keys, which you can consult by typing =?=

#+begin_src emacs-lisp :results replace :tangle no
  (print (mapconcat
          (lambda (action)
            (cl-destructuring-bind (key fn &optional description) action
              (format "%s: %s"
                      (char-to-string key)
                      (or description fn))))
          aw-dispatch-alist
          "\n"))
#+end_src

#+RESULTS:
#+begin_example
x: Delete Window
m: Swap Windows
M: Move Window
c: Copy Window
j: Select Buffer
n: aw-flip-window
u: Switch Buffer Other Window
e: Execute Command Other Window
F: Split Fair Window
v: Split Vert Window
b: Split Horz Window
o: Delete Other Windows
T: Transpose Frame
?: aw-show-dispatch-help
#+end_example

you can also trigger these through [[*embark to ace-window][embark]]
***** window resizing
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; window resizing
  (general-define-key "S-C-<left>" 'shrink-window-horizontally)
  (general-define-key "S-C-<right>" 'enlarge-window-horizontally)
  (general-define-key "S-C-<down>" 'shrink-window)
  (general-define-key "S-C-<up>" 'enlarge-window)
#+END_SRC
***** Undo/redo window config using winner
#+begin_src emacs-lisp :tangle yes
  (winner-mode 1)
#+end_src
****** winner usage                                                   :usage:
- /C-c <left>/ :: undo window change
- /C-c <right>/ :: redo window change
**** Buffers
***** ibuffer
Start using ibuffer
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; use ibuffer
  (general-define-key "C-x C-b" 'ibuffer)
#+END_SRC
Here we sort the buffers for a nicer ibuffer view
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; sort buffers
  (setq ibuffer-saved-filter-groups
        `(("default"
           ("emacs.d"
            (filename . "/.emacs.d/"))
           ("emacs"
            (or
             (name . "^\\*scratch\\*$")
             (name . "^\\*Messages\\*$")
             (name . "^\\*Help\\*$")
             (name . "^\\*Completions\\*$")
             (name . "^\\*Quail Completions\\*$")
             (name . "^\\*Packages\\*$")
             (name . "^\\*Backtrace\\*$")
             (name . "^\\*Compile-Log\\*$")))
           ("Code"
            (or
             (mode . c-mode)
             (mode . c++-mode)
             (mode . perl-mode)
             (mode . python-mode)
             (mode . ruby-mode)
             (mode . emacs-lisp-mode)
             (mode . lisp-mode)
             (mode . sh-mode)
             (mode . php-mode)
             (mode . xml-mode)
             (mode . html-mode)
             (mode . web-mode)
             (mode . css-mode)
             (mode . js-mode)
             (mode . js2-mode)
             (mode . js3-mode)))
           ("Mail"
            (or
             (mode . message-mode)
             (mode . mail-mode)
             (mode . mu4e-main-mode)
             (mode . mu4e-headers-mode)
             (mode . mu4e-view-mode)
             (mode . mu4e-compose-mode)))
           ("Chat"
            (or
             (mode . Ement-Room)
             (name . "^\\*Ement*")))
           ("Dired"
            (or
             (mode . dired-mode)
             (mode . direx-mode)))
           ("Org"
            (mode . org-mode))
           )))

  (setq ibuffer-show-empty-filter-groups nil)

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC
****** TODO look in to ibuffer-vc.el
https://github.com/purcell/ibuffer-vc/blob/master/ibuffer-vc.el

**** Olivetti
Olivetti mode offers a write centric, no clutter interface

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package olivetti)
#+end_src


**** Line numbers
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-unset-key "\C-x\l")
  (general-create-definer keys/lines
     :prefix "C-x l")
  (keys/lines
   "n" 'display-line-numbers-mode
   "N" 'global-display-line-numbers-mode
   "c" 'count-lines-page
   "g" 'goto-line)
#+END_SRC
***** TODO toggle numbers                                           :feature:
Make =C-x l n= toggle between =none=, =absolute= and =relative=

**** Line wrapping
=visual-line-mode= provides wrapping without actually modifying the text. In order for this mode to work properly, truncation needs to be disabled
#+begin_src emacs-lisp :tangle yes
  (setq-default truncate-lines t)

  (keys/lines
   "w" 'visual-line-mode)
#+end_src

When a paragraph is indented, =visual-line-mode= tends to let the lower lines drag to the left. This is where =adaptive-wrap= comes in.
This simulates a *soft* =fill-paragraph= (=M-q=)

=adaptive-wrap= however does not play nice with [[*indent by default][org-indent-mode]].
Got the sauce for this lambda [[https://github.com/syl20bnr/spacemacs/issues/1418#issuecomment-423045689][here]].
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package adaptive-wrap
    :config
    (add-hook 'visual-line-mode-hook
              #'(lambda ()
                 (unless
                     (member major-mode
                      '(org-mode))
                   (adaptive-wrap-prefix-mode)))))

#+END_SRC

**** Indent guides
Do not globally enable this mode, it does not play well with some other modes I use and makes emacs stutter on movement.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package indent-guide
    :general
    (keys/lines
     "im" 'indent-guide-mode
     "ig" 'indent-guide-global-mode
     "is" 'indent-guide-show))
#+END_SRC

***** TODO =indent-guide-show= works once, then you have to toggle the mode :bug:
*** General interaction and settings

**** Defaults
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Auto refresh buffers when edits occur outside emacs
  (global-auto-revert-mode 1)

  ;; Save point position between sessions
  (use-package saveplace
    :init
    (save-place-mode t)
    :config
    (setq save-place-file (expand-file-name ".places" user-emacs-directory)))

  ;; this is disabled by default
  (put 'narrow-to-region 'disabled nil)

  ;; Never insert tabs
  ;; Tabs can be inserted with C-q C-i (quoted insert indent)
  (set-default 'indent-tabs-mode nil)

  ;; Easily navigate sillycased words
  (global-subword-mode 1)


  ;; Keep cursor away from edges when scrolling up/down
  (use-package smooth-scrolling
    :general
    (keys/lines
      "s" 'smooth-scrolling-mode))
  ;; Sentences do not need double spaces to end. Period.
  (set-default 'sentence-end-double-space nil)

    ;; A saner ediff
  (setq ediff-diff-options "-w")
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
  ;; that you can always see what's happening.
  (setq eval-expression-print-level nil)

  ;; When popping the mark, continue popping until the cursor actually moves
  ;; Also, if the last command was a copy - skip past all the expand-region cruft.
  (defadvice pop-to-mark-command (around ensure-new-position activate)
    (let ((p (point)))
      (when (eq last-command 'save-region-or-current-line)
        ad-do-it
        ad-do-it
        ad-do-it)
      (dotimes (i 10)
        (when (= p (point)) ad-do-it))))

  ;; Hide mousepointer when typing
  (setq make-pointer-invisible t)

  ;; erc made the pointer go off screen, forcing a recenter
  ;; oufo on #emacs suggested this: (works great)
  (setq scroll-conservatively 1000)

  ;; simple y or n questions
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; do not use shift select
  (setq shift-select-mode nil)

  ;; replace region when typing
  (delete-selection-mode t)

  ;; hungry delete mode
  ;; Plain and simple, it makes backspace and C-d erase all consecutive white space
  ;; (instead of just one). Use it everywhere.
  (use-package hungry-delete
               :init
               (global-hungry-delete-mode))
#+END_SRC

***** Minnibuffer
Allow recursive minibuffers
#+begin_src emacs-lisp :tangle yes
  (setq enable-recursive-minibuffers t)
#+end_src

Do not allow cursor in the prompt
#+begin_src emacs-lisp :tangle yes
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

***** Auto-save
Emacs will create auto-save files from which you can recover (#filename.thing#)
I'd rather not have emacs do this
#+begin_src emacs-lisp :tangle yes
  (setq auto-save-default nil)
#+end_src
But I do want to auto-save in the actual file though.
=auto-save-visited-mode= will save every file-visiting buffer after being idle for 2 minutes
#+begin_src emacs-lisp :tangle yes
  (auto-save-visited-mode)
  (setq auto-save-timeout 120)
#+end_src

***** Search with regex
Use regex when searching by default
#+BEGIN_SRC emacs-lisp :tangle yes
  (general-define-key "C-s" 'isearch-forward-regexp)
  (general-define-key "C-r" 'isearch-backward-regexp)
  (general-define-key "C-M-s" 'isearch-forward)
  (general-define-key "C-M-r" 'isearch-backward)
#+END_SRC
***** Backups
from: http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html
This function will mirror all directories at the given backup dir.
For example, if you are editing a file =~/web/xyz/myfile.txt=, and your backup root is =~/.emacs.d/emacs-backup/=, then the backup will be at =~/.emacs.d/emacs-backup/Users/j/web/xyz/myfile.txt=.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; make backup to a designated dir, mirroring the full path
  (defun my/backup-file-full-dir (fpath)
    "Return a new backup file path of a given file path.
  If the new path's directories does not exist, create them."
    (let* (
          (backupRootDir (expand-file-name
                   (concat user-emacs-directory "backups")))
          ;;(backupRootDir "~/.emacs.d/emacs-backup/")
          (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, ⁖ “C:”
          (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
          )
      (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
      backupFilePath
    )
  )

  ;; Actually set the backup dir now
  (setq make-backup-file-name-function 'my/backup-file-full-dir)
#+END_SRC
***** Dates and calendar

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq calendar-week-start-day 1
        european-calendar-style t)
#+end_src
***** Garbage collection
Emacs, by default, is configured to accumulate less than a MB (800000 bytes) before it collects garbage.
Don't be so stingy on the memory, we have lots now. It's the distant future. (expressed in bytes)

#+begin_src emacs-lisp :tangle yes
  (setq gc-cons-threshold 80000000)
#+end_src

****** troubleshooting garbage collection                   :troubleshooting:
I was having issues with an unresponsive emacs at times.

set =garbage-collection-messages= to non-nil if you want to be notified in the minibuffer whenever emacs collectsits garbage
#+begin_src emacs-lisp :tangle no
  (setq garbage-collection-messages t)
#+end_src


******* max memory in minibuffer

This sets up the consinement before gc up to be almost unlimited while in the minibuffer

#+begin_src emacs-lisp :tangle no
  (defun my-minibuffer-setup-hook ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun my-minibuffer-exit-hook ()
    (setq gc-cons-threshold 80000000))

  (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)

#+end_src
**** Undo tree
Reimplements the undo system as a tree
#+begin_src emacs-lisp :tangle yes
  (use-package undo-tree
    :init
    (global-undo-tree-mode)
    :custom
    (undo-tree-mode-lighter "")
    (undo-tree-auto-save-history nil)
    (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (undo-tree-enable-undo-in-region t)
    (undo-tree-visualizer-timestamps t))
#+end_src
using =undo-tree-auto-save-history= has proven to not play that well with autosaving. Disabling it for now

***** undo usage                                                      :usage:
- /C-x u/ :: undo-tree-visualise
  - d :: diff

***** TODO look in to saving states                               :potential:
see undo tree docs
**** Avy
Quickly and accuratly move around the cursor with =avy=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (general-create-definer keys/goto
     :prefix "M-g")
  (use-package avy
    :config
    (setq avy-all-windows 'all-frames)
    :general
    (keys/goto
      "j" 'avy-goto-word-1
      "g" 'avy-goto-char-timer
      "c" 'avy-goto-char-2
      "l" 'avy-goto-line
      "r" 'avy-resume
      "C" 'goto-char
      "L" 'goto-line))
#+END_SRC
***** usage                                                       :usage:
- M-g :: goto prefix, ? for more
  Once candidates are visible, type a post character (again type ? to see options), then complete the candidate
**** Smarter move to beginning of line
A nice function that knows where the business part of a line starts
from: http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  (general-define-key "C-a" 'my/smarter-move-beginning-of-line)
#+END_SRC
***** TODO also add move to beginning of heading in org         :feature:
C-a in org-mode is org-move-to-beginning-of-line
IT would be nice to also move to the beginning of the heading, after the *s

This is apparently a thing: org-special-ctrl-a/e
But the above remapping overrides it (works on home and end keys)

#+begin_src emacs-lisp :tangle yes
  (setq org-special-ctrl-a/e t)
#+end_src
**** Browse kill ring
A helm alternative exists (helm-show-kill-ring), but browse kill ring
offer a lot more features (delete, edit, ...).
Keeping this one in, with some finger gymnsastics.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package browse-kill-ring
               :general
               ("C-M-y" 'browse-kill-ring))
#+END_SRC
**** Copy/Cut curent line if no selection
http://ergoemacs.org/emacs/emacs_copy_cut_current_line.html

Normally, when you would want to copy a line you would do something like
C-a, C-k, C-/
or, if you use kill-whole line
C-;, C-/
Lets save a keystroke!

Define the functions
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun xah-copy-line-or-region ()
      "Copy current line, or text selection.
  When `universal-argument' is called first, copy whole buffer (but respect `narrow-to-region')."
      (interactive)
      (let (p1 p2)
          (if (null current-prefix-arg)
              (progn (if (use-region-p)
                         (progn (setq p1 (region-beginning))
                             (setq p2 (region-end)))
                         (progn (setq p1 (line-beginning-position))
                             (setq p2 (line-end-position)))))
              (progn (setq p1 (point-min))
                  (setq p2 (point-max))))
          (kill-ring-save p1 p2)))

  (defun xah-cut-line-or-region ()
      "Cut current line, or text selection.
  When `universal-argument' is called first, cut whole buffer (but respect `narrow-to-region')."
      (interactive)
      (let (p1 p2)
          (if (null current-prefix-arg)
              (progn (if (use-region-p)
                         (progn (setq p1 (region-beginning))
                             (setq p2 (region-end)))
                         (progn (setq p1 (line-beginning-position))
                             (setq p2 (line-beginning-position 2)))))
              (progn (setq p1 (point-min))
                  (setq p2 (point-max))))
          (kill-region p1 p2)))
#+END_SRC
Set the keybindings (replacing the default behaviour)
#+BEGIN_SRC emacs-lisp :tangle yes
  (general-define-key "M-w" 'xah-copy-line-or-region)
  (general-define-key "C-w" 'xah-cut-line-or-region)
#+END_SRC
**** (Un)comment region or line
from: http://stackoverflow.com/a/9697222/1929897
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/comment-or-uncomment-region-or-line ()
      "Comments or uncomments the region or the current line if there's no active region."
      (interactive)
      (let (beg end)
          (if (region-active-p)
              (setq beg (region-beginning) end (region-end))
              (setq beg (line-beginning-position) end (line-end-position)))
          (comment-or-uncomment-region beg end)
          (next-line)))
   (general-define-key "C-c /" 'my/comment-or-uncomment-region-or-line)
#+END_SRC
**** popwin
Pop!
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package popwin
               :init
               (require 'popwin)
               (popwin-mode t))
#+END_SRC
**** Some help
***** Which-key                                                  :mode:minor:
[[https://github.com/justbur/emacs-which-key][Emacs package that displays available keybindings in popup]]
During any key sequence, do =C-h= or =?= to popup which-key.

#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :init
    ;; Allow C-h to trigger which-key before it is done automatically
    (setq which-key-show-early-on-C-h t)
    ;; make sure which-key doesn't show normally but refreshes quickly after it is
    ;; triggered.
    (setq which-key-idle-delay 10000)
    (setq which-key-idle-secondary-delay 0.05)

    (setq which-key-sort-order 'which-key-prefix-then-key-order)

    (setq which-key-max-description-length 90)
    (setq which-key-add-column-padding 2)
    (which-key-mode))
#+end_src

Other commands of interest:
- which-key-show-top-level :: will show most key bindings without a prefix.
- which-key-show-major-mode :: will show the currently active major-mode bindings. It’s similar to C-h m but in a which-key format.

****** TODO Prefixes that used to trigger guide-key               :doc:learn:
These probably merit a better place to document them, or an effort to actually learn them?

- "C-c !" :: flycheck
- "C-x r" :: ... stuff
- "C-x 4" :: file other window
- "C-x v" :: generic version controll
- "C-x 8" :: special chars
- "C-x x" :: persp
- "C-c h" :: helm default prefix


***** flycheck code verification
****** Usage
http://flycheck.readthedocs.org
Flycheck will run external commands to verify code. To find out what checkers can be used do
#+BEGIN_EXAMPLE
  M-x flycheck-describe-checker
#+END_EXAMPLE
It's default keybinding prefix is 'C-c !'
c for flycheck buffer
n-p for navigating errors
But guide-key should have your back
****** Modeline
#+BEGIN_SRC emacs-lisp :tangle yes
  (defface my/flycheck-grey
      '((((class color) (min-colors 88))
            :foreground "grey"))
      "Face for my/flycheck-mode-line-status-icon"
      :group 'my/flycheck-icon
      )
  (defface my/flycheck-red
      '((((class color) (min-colors 88))
            :foreground "red"))
      "Face for my/flycheck-mode-line-status-icon"
      :group 'my/flycheck-icon
      )
  (defface my/flycheck-orange
      '((((class color) (min-colors 88))
            :foreground "orange"))
      "Face for my/flycheck-mode-line-status-icon"
      :group 'my/flycheck-icon
      )
  (defface my/flycheck-green
      '((((class color) (min-colors 88))
            :foreground "green"))
      "Face for my/flycheck-mode-line-status-icon"
      :group 'my/flycheck-icon
      )

  (defun my/flycheck-mode-line-status-text (&optional status)
    "Get a coloured icon (and some numbers) describing STATUS for use in the mode line.

  STATUS defaults to `flycheck-last-status-change' if omitted or
  nil."
    (let ((icon (pcase (or status flycheck-last-status-change)
                  (`not-checked (propertize (string 32 #xF10C) 'font-lock-face 'my/flycheck-grey))
                    ;;  
                  (`no-checker (propertize (string 32 #xF05C) 'font-lock-face 'my/flycheck-grey))
                    ;;  
                  (`running (propertize (string 32 #xF05D) 'font-lock-face 'my/flycheck-grey))
                    ;;  
                  (`errored (propertize (string 32 #xF05C) 'font-lock-face 'my/flycheck-red))
                    ;;  
                  (`finished
                      (if flycheck-current-errors
                          (let ((error-counts (flycheck-count-errors
                                               flycheck-current-errors)))
                              (concat
                                  (if (> (cdr (assq 'error error-counts)) 0)
                                      (propertize (string 32 #xF057) 'font-lock-face 'my/flycheck-red)
                                        ;;  
                                      (propertize (string 32 #xF057) 'font-lock-face 'my/flycheck-orange))
                                      ;;  
                                  (format "%s/%s"
                                      (or (cdr (assq 'error error-counts)) 0)
                                      (or (cdr (assq 'warning error-counts)) 0))))
                          (propertize (string 32 #xF058) 'font-lock-face 'my/flycheck-green)
                          ;;  
                          ))
                  (`interrupted (propertize (string 32 #xF056) 'font-lock-face 'my/flycheck-grey))
                    ;;  
                  (`suspicious (propertize (string 32 #xF059) 'font-lock-face 'my/flycheck-grey))
                    ;;  
                    )))
      (concat " " icon)))

#+END_SRC
******* TODO flycheck mode line
activate outside of customize
Make colors appear on modeline
****** Setup
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck)
#+END_SRC
***** discover
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package discover
               :init
               (global-discover-mode 1))
#+END_SRC
***** documentation
Dash is an offline documentation browser for OSX
http://kapeli.com/dash
Zeal is the equivalent on linux.

First a dash prefix:
#+begin_src emacs-lisp :tangle yes
  (general-create-definer keys/dash
    :prefix "C-c d")

#+end_src

****** helm-dash
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package esqlite)
  (use-package helm-dash
    :requires (helm esqlite)
    :config

    (defun my/dash-install-docset (docset)
      (let ((this-docset-path (expand-file-name
                               (concat docset ".docset")
                               helm-dash-docsets-path)))
        (unless (file-exists-p this-docset-path)
          (helm-dash-install-docset docset))))

    ;; install docsets
    (my/dash-install-docset "JavaScript")
    (my/dash-install-docset "jQuery")
    (my/dash-install-docset "Grunt")
    (my/dash-install-docset "D3JS")
    (my/dash-install-docset "Meteor")
    (my/dash-install-docset "MomentJS")
    (my/dash-install-docset "Lo-Dash")
    (my/dash-install-docset "UnderscoreJS")

    (my/dash-install-docset "HTML")
    (my/dash-install-docset "Bootstrap_3")
    (my/dash-install-docset "Foundation")
    (my/dash-install-docset "Emmet")

    (my/dash-install-docset "CSS")
    (my/dash-install-docset "Less")
    (my/dash-install-docset "Sass")
    (my/dash-install-docset "Stylus")
    (my/dash-install-docset "Compass")
    (my/dash-install-docset "Bourbon")

    (my/dash-install-docset "Bash")
    (my/dash-install-docset "Font_Awesome")

    (my/dash-install-docset "MongoDB")

    (my/dash-install-docset "Markdown")
    (my/dash-install-docset "SVG")

    (my/dash-install-docset "Processing")

    ;;(setq helm-dash-browser-func 'eww)
    (setq helm-dash-browser-func 'browse-url)

    :general
    (keys/dash
     "d" 'helm-dash-at-point
     "SPC" 'helm-dash
     "a" 'helm-dash-activate-docset
     "r" 'helm-dash-reset-connections))

#+END_SRC
****** Zeal at point
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package zeal-at-point
    :general
    (keys/dash
     "." 'zeal-at-point)
    :config
    (add-to-list 'zeal-at-point-mode-alist '(python-mode . ("python3" "django"))))
#+END_SRC
**** expand-region                                               :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package expand-region
                 :general
                 ("C-=" 'er/expand-region))
#+END_SRC

**** highlight-symbol
I basically just use this to highlight, none of the query replace and moving around stuff
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package highlight-symbol)
#+END_SRC
**** multiple-cursors                                            :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :general
    ("C->" 'mc/mark-next-like-this)
    ("C-<" 'mc/mark-previous-like-this)
    ("C-c C-<" 'mc/mark-all-like-this)
    ("C-c C->" 'mc/edit-lines)) ;; adds a cursor to all lines in current region

#+END_SRC
**** iedit-mode
iedit will let you =C-;= to edit all occurences (or =tab=, =M-;= to remove some) at once =C-h f iedit-mode= for more info
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package iedit)
#+END_SRC
***** TODO C-; is bound by flyspell to auto correct previous word       :bug:
**** smartparens                                                 :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartparens
    :init
    (smartparens-global-mode))
#+END_SRC

**** dired
This little variable defines dired to guess the directory to move/copy to by looking at a potential dired in another window.
Making it behave somewhat like a two-pane file manager
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq dired-dwim-target t)
#+END_SRC

Icons in dired!
see [[*Icons!][Icons!]]

#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

***** dired-x
Dired extra. Extra features for dired
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'dired-load-hook
      (function (lambda () (load "dired-x"))))
#+END_SRC
***** direx
Direx shows the dir or projects file structure.
We'll be using popwin to make it pop!
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package direx
               :requires
               (popwin)
               :config
               (progn (push '(direx:direx-mode :position left :width 40 :dedicated t)
                            popwin:special-display-config)
                      (global-set-key (kbd "C-x C-j") 'direx-project:jump-to-project-root-other-window)))
#+END_SRC
**** recent files
Save a list of recent files visited.
Open recent file with C-x f

#+begin_src emacs-lisp :tangle yes
  (use-package recentf
    :config
    (setq recentf-max-saved-items 10000
          recentf-max-menu-items 5000)
    (recentf-mode 1)
    (run-at-time nil (* 5 60) 'recentf-save-list)
    :general
    ("C-x f" 'consult-recent-file))
#+end_src

***** inhibit message

#+begin_src emacs-lisp :tangle yes
  (defun no-msg (function)
    "Prevent FUNCTION from showing `Wrote <FILE>' messages.
  \(The messages are still logged to `*Messages*'.)"
    (let ((inhibit-message  t))
      (funcall function)))

  (advice-add 'recentf-save-list :around 'no-msg)
#+end_src


**** move and rename files & buffers
Small conveniece defuns by steveyegge2
https://sites.google.com/site/steveyegge2/my-dot-emacs-file
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME." (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn (rename-file name new-name 1)
                 (rename-buffer new-name)
                 (set-visited-file-name new-name)
                 (set-buffer-modified-p nil))))))

  (defun move-file-and-buffer-to-dir (dir)
   "Moves both current buffer and file it's visiting to DIR." (interactive "DNew directory: ")
   (let* ((name (buffer-name))
          (filename (buffer-file-name))
           (dir
           (if (string-match dir "\\(?:/\\|\\\\)$")
           (substring dir 0 -1) dir))
           (newname (concat dir "/" name)))

     (if (not filename)
         (message "Buffer '%s' is not visiting a file!" name)
       (progn (copy-file filename newname 1)
              (delete-file filename)
              (set-visited-file-name newname)
              (set-buffer-modified-p nil)
              t))))

#+END_SRC
**** Auto complete
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package auto-complete
               :init
               ;; (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
               (require 'auto-complete-config)
               (ac-config-default))

#+END_SRC

***** company-mode
Looks like a nice alternative with less confusing completion
http://www.reddit.com/r/emacs/comments/2ekw22/autocompletemode_vs_companymode_which_is_better/

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :config
    (global-company-mode)
    (setq company-idle-delay 0.3
          company-minimum-prefix-length 2
          company-transformers '(company-sort-by-backend-importance)
          company-auto-complete '('company-explicit-action-p)
          company-selection-wrap-around t
          company-show-numbers t
          company-tooltip-align-annotations t
          company-tooltip-limit 20
          company-tooltip-margin 2
          company-tooltip-minimum-width 20
          company-auto-complete-chars nil
          company-dabbrev-code-modes
          (quote
           (prog-mode batch-file-mode csharp-mode css-mode erlang-mode haskell-mode jde-mode lua-mode python-mode js-mode html-mode web-mode))
          company-dabbrev-code-time-limit 0.5
          company-dabbrev-other-buffers t
          company-dabbrev-time-limit 0.5))

  (use-package yasnippet
    :requires company
    :config
    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas)
              (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))
    (yas-global-mode 1)
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))


  (use-package company-quickhelp
    :requires company
    :config
    (company-quickhelp-mode t)
    (setq company-quickhelp-use-propertized-text t
          company-quickhelp-color-background "#112b2b"
          company-quickhelp-color-foreground "white"))

  (use-package helm-company
    :general
    (:keymaps 'company-active-map
     "M-h" 'helm-company)
    :requires company)
  #+END_SRC

**** yasnippet

The activation of yasnippet is now folded in to [[*company-mode][company-mode]].
I have not made any customisations to yasnippet config.


**** Tramp
Tramp is fastest over ssh (for not to large files)
Or open files as root
#+BEGIN_EXAMPLE
C-x C-f /sudo::/etc/someconf
C-x C-f /some.server.com:/etc/someconf
#+END_EXAMPLE
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq tramp-default-method "ssh")
#+END_SRC
***** sudo a file on a remote host
This little line of magic lets you connect to a remote host and sudo in to a file.
The variable tramp-default-proxies-alist is available only after tramp has loaded, hence eval-after-load
#+BEGIN_EXAMPLE
C-x C-f /sudo:some.server.com:/etc/someconf
#+END_EXAMPLE
In order to specify multiple hops, it is possible to define a proxy host to pass through, via the variable tramp-default-proxies-alist. This variable keeps a list of triples (host user proxy).
Entries are added to the top of a list. The most relevant entry should therefor be entered last
#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-after-load "tramp"
      '(add-to-list 'tramp-default-proxies-alist
           '(".*" "\\`root\\'" "/ssh:%h:")))
#+END_SRC
But make sure we don't need to go through ssh on our own machine
#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-after-load "tramp"
      '(add-to-list 'tramp-default-proxies-alist
           '((regexp-quote (system-name)) nil nil)))
#+END_SRC
***** More on proxies
****** Ad-hoc
An ad-hoc method of using Tramp with multiple hops is possible with the folowing syntax
#+BEGIN_EXAMPLE
C-x C-f /ssh:secureuser@protectionhost|ssh:you@thehosttoworkon:/path
#+END_EXAMPLE
****** using .ssh/config
This allows you to hop even for ssh, scp etc.
#+BEGIN_SRC config :tangle no
Host hopping
User yourusername
HostName hoppinghostname

Host some hostname patterns
User yourusername
ProxyCommand ssh -q hopping exec nc %h %p
#+END_SRC
**** Quitting emacs
A little reworking of the default to close windows, but keep the deamon running.
And a way to effectively kill emacs
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; define function to shutdown emacs server instance
  (defun my/server-stop ()
    "Save buffers, Quit, and Shutdown (kill) server"
    (interactive)
    (save-some-buffers)
    (kill-emacs)
    )

  ;; I don't need to kill emacs that easily
  ;; the mnemonic is C-x REALLY QUIT
  (general-define-key "C-x r q" 'my/server-stop)
  (general-define-key "C-x C-c" 'delete-frame)
#+END_SRC
**** Rainbow mode
Colorizes color values in your buffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-mode)
#+END_SRC
**** Webjump

Webjump lets you quickly search google, wikipedia, emacs wiki, ...
It is a built-in package and allready has a couple of sites coded in.
But it's fairly easy to define your own:

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar webjump-my-sites
    `(
         ("Arch forums" .
             [simple-query
                 "https://bbs.archlinux.org/"
                 "https://bbs.archlinux.org/search.php?action=search&keywords="
                 ,(concat ;; fluxBB options
                      ;; "&author=username"
                      "&forum_id=-1" ;; all forums
                      "&search_in=topic" ;; [all/message/topic]
                      "&sort_by=0" ;; 0 (post_time) / 1 (author) / 2 (subject) / 3 (forum)
                      "&sort_dir=DESC" ;; DESC/ASC
                      "&show_as=topics" ;; topics/posts
                      )])
         ("ArchWiki" .
             [simple-query
                 "https://wiki.archlinux.org/"
                 "https://wiki.archlinux.org/index.php?title=Special%3ASearch&fulltext=Search&search="
                 ""]))
    "My webjump sites")

  (use-package webjump
      :config
      (setq webjump-sites
          (append
              webjump-my-sites
              webjump-sample-sites))
      :general
      ("C-x g" 'webjump)
      ("C-x M-g" 'browse-url-at-point))
#+END_SRC
**** TODO history - source code navigation
A more intuitive way of popping the mark (which I never really started
using)
[[https://github.com/boyw165/history][github]]

**** open as sudo

A little elisp to reopen a file with sudo.
Source: [[https://github.com/sri/dotfiles/blob/master/emacs/emacs.d/my-fns.el#L236][sri's dotfiles]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when file-name
        (find-alternate-file (concat "/sudo::" file-name)))))
#+end_src

** Secrets
Some configuration options (like server names, ports, passwords) are best kept secret.
I keep them in a gpg encrypted file =private.el.gpg=.
Because emacs will ask you for the password of your gpg key, loading the file on
startup will block starting =emacs --deamon=.
I therefor load this file only when needed.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar my/secrets-loaded nil
    "Is t when my secrets file (private.el.gpg) has been loaded.

  Just to prevent it from trying to load it twice.")

  (defun my/load-secrets (&optional where)
    "Load secrets from private.el.gpg if not allready done so"
    (interactive)
    (unless my/secrets-loaded
      (load (expand-file-name "private.el.gpg"
                              user-emacs-directory))
      (message "private.el loaded by %s" where)))
#+END_SRC
** Git
*** magit                                                        :mode:major:
The git interface in emacs
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :general
    ("C-x m" 'magit-status)
    :init
    (setq magit-last-seen-setup-instructions "1.4.0"))
#+END_SRC
*** git-timemachine                                              :mode:major:
Allows you to walk though different versions of a file
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-timemachine
    :general
    ("C-x M t" 'git-timemachine))
#+END_SRC
*** git-messenger
Allows you to see who's to blame for the current line
M-w	Copy commit message and quit
c	Copy commit ID and quit
d	Pop up git diff of last change of this line
s	Pop up git show --stat of last change of this line
S	Pop up git show --stat -p of last change of this line
q	Quit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-messenger
    :general
    ("C-x M m" 'git-messenger:popup-message))
#+END_SRC
*** blamer
[[https://github.com/Artawower/blamer.el][Artawower/blamer.el: A git blame plugin for emacs inspired by VS Code's GitLens plugin]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package blamer
    :custom
    (blamer-idle-time 0.5)
    (blamer-min-offset 70)
    :general
    ("C-x M b" 'blamer-mode))
#+END_SRC
*** git-auto-commit
[[https://github.com/ryuslash/git-auto-commit-mode][ryuslash/git-auto-commit-mode: Automatically commit to git after each save]]

#+begin_src emacs-lisp :tangle yes
(use-package git-auto-commit-mode)
#+end_src

Use =.dir-locals.el= files where needed.
** Spelling
We all make mistakes..
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word)
    )

  ;; switch dictionaries
  (let ((langs '("english" "nederlands" "francais")))
    (setq lang-ring (make-ring (length langs)))
    (dolist (elem langs) (ring-insert lang-ring elem)))
  (defun my/cycle-ispell-languages ()
    "Cycles through a list of set languages"
    (interactive)
    (let ((lang (ring-ref lang-ring -1)))
      (ring-insert lang-ring lang)
      (ispell-change-dictionary lang)))
  (general-define-key "<f7>" 'my/cycle-ispell-languages)

  ;; avoid message overload by printing every checked word
  (setq flyspell-issue-message-flag nil)

  (general-define-key "<f8>" 'ispell-word)
  (general-define-key "C-S-<f8>" 'flyspell-mode)
  (general-define-key "C-M-<f8>" 'flyspell-buffer)
  (general-define-key "C-<f8>" 'flyspell-check-previous-highlighted-word)
  (general-define-key "M-<f8>" 'flyspell-check-next-highlighted-word)
#+END_SRC
*** TODO wcheck-mode
#+BEGIN_EXAMPLE emacs-lisp
;; Alternative spell check mode that checks visible buffer
;; https://github.com/tlikonen/wcheck-mode
(use-package wcheck-mode)


(setq wcheck-language-data
      '(("US English"
         (program . "/usr/local/bin/hunspell")
         (args "-l" "-d" "en_US")
         (action-program . "/usr/local/bin/hunspell")
         (action-args "-a" "-d" "en_US")
         (action-parser . wcheck-parser-ispell-suggestions))
        ;; ("Another language"
         ;; ...)))
))
#+END_EXAMPLE

** Coding

*** Tree-sitter (buffer-local up-to-date syntax tree)
Triggered by [[https://www.masteringemacs.org/article/tree-sitter-complications-of-parsing-languages][this post on Mastering Emacs]]. [[https://tree-sitter.github.io/tree-sitter/][Tree-sitter]] builds a syntax tree, used for folding, highlighting etc.
[[https://emacs-tree-sitter.github.io/][tree-sitter.el]] currently supports [[https://emacs-tree-sitter.github.io/syntax-highlighting/queries/][querying]] the syntax tree and syntax highlighting

Install and enable =tree-sitter= for all supported major-modes (list them by checking the variable ~tree-sitter-major-mode-language-alist~) 
#+begin_src emacs-lisp :tangle yes
  (use-package tree-sitter
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
  (use-package tree-sitter-langs)
#+end_src

**** Move around, combobulating the tree
#+begin_quote
Combobulate
(Verb) To put together in a somewhat mysterious manner. To bring something out of a state of confusion or disarray. To manufacture by some unusual or novel means. Antonym: discombobulate. 
#+end_quote

#+begin_src emacs-lisp :tangle yes
  (use-package combobulate
    :quelpa (combobulate
             :fetcher github
             :repo "mickeynp/combobulate")
    :hook
    (python-mode . combobulate-mode))
#+end_src

***** usage                                                       :usage:
- /C-o o/ :: combobulate menu
- /C-o j/ :: avy goto navigable part
  
*** TODO code folding
salvaged from old config:
#+BEGIN_SRC emacs-lisp :tangle no
;; Fold the active region
(global-set-key (kbd "C-c C-f") 'fold-this-all)
(global-set-key (kbd "C-c C-F") 'fold-this)
(global-set-key (kbd "C-c M-f") 'fold-this-unfold-all)
#+END_SRC
*** JavaScript

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; javascript (js2-mode)
  (use-package js2-refactor)
  (use-package skewer-mode)
  (use-package js2-mode
               :requires
               (flycheck tern js2-refactor skewer-mode)
               :mode
               "\\.js\\'"
               :config
               (progn (add-hook 'js2-mode-hook 'flycheck-mode)
                      (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
                      (add-hook 'js2-mode-hook 'skewer-mode)
                      ;; js2-refactor keybindings start with:
                      (js2r-add-keybindings-with-prefix "C-c C-m")))

  ;; (add-hook 'js2-mode-hook 'repl-toggle-mode)
  ;; (add-hook 'js2-mode-hook 'hs-minor-mode)
  ;; repeat for js3-mode /TODO there must be a better way to define these
#+END_SRC
*** json
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; json
  (use-package json-mode)
  (add-hook 'json-mode-hook 'flycheck-mode)
#+END_SRC
*** web mode (html+)
#+BEGIN_SRC emacs-lisp :tangle no
  ;; web mode
  (use-package web-mode
               :requires
               (flycheck)
               :mode
               "\\.html\\'"
               ;; (list "\\.html\\'" "\\.txp\\'")
               :init
               (add-hook 'web-mode-hook 'flycheck-mode))

#+END_SRC
*** php
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
  (add-hook 'php-mode-hook 'flycheck-mode)
#+END_SRC
*** python
on flycheck https://github.com/jorgenschaefer/elpy/issues/137#issuecomment-55403160
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; python
  (use-package elpy
    :requires (company flycheck)
    :config (add-hook 'python-mode-hook 'flycheck-mode)
            (elpy-enable)
            (when (require 'flycheck nil t)
              (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
              (add-hook 'elpy-mode-hook 'flycheck-mode))
            (setq elpy-modules (delq 'elpy-module-highlight-indentation elpy-modules))
    :init (setq elpy-company-hide-modeline nil))
#+END_SRC
*** puppet
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; puppet mode
  (use-package puppet-mode
               :mode "\\.pp\\'")

#+END_SRC
*** yaml
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'yaml-mode-hook 'flycheck-mode)
#+END_SRC
*** shell

Flyscheck can use [[http://www.shellcheck.net/][shellcheck]] as a checker. Make sure it is installed on your system.

#+BEGIN_EXAMPLE sh
  sudo pacman -S shellcheck
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'sh-mode-hook 'flycheck-mode)
#+END_SRC
** Search
*** Ag
The silver searches is nice and fast for searching inside code repos
#+BEGIN_SRC emacs-lisp :tangle yes
  (if (executable-find "ag")
      (use-package ag))
#+END_SRC

** Major modes

*** comint-mode                                                  :mode:major:
Comint-mode is a major mode for interaction with an inferior interpreter.
Shells etc use comint mode.
When the buffer gets large, emacs gets slow, we'll truncate when new lines are added
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; truncate comint buffers after x lines
  (setq comint-buffer-maximum-size 5000
        comint-scroll-to-bottom-on-input t)

  (add-hook 'comint-output-filter-functions 'comint-truncate-buffer)
#+END_SRC

*** Org                                                          :mode:major:
**** Org interaction

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
  (setq org-replace-disputed-keys t)

  ;; follow links on RET (otherwise use C-c C-o)
  (setq org-return-follows-link t)

  ;; Fontify org-mode code blocks
  (setq org-src-fontify-natively t)

  ;; Tell me when editing stuff I can't see
  (setq org-catch-invisible-edits (quote show-and-error))

  ;; keybindings!
  (general-define-key
   "C-c l" 'org-store-link
   ;; insert them in to org mode using C-c C-l
   "C-c c" 'org-capture
   "C-c a" 'org-agenda)

  (setq org-imenu-depth 9)

  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC
***** Speed keys
When speed keys are enabled, you can do lots of one-key-no-modifier moving around and more when the point is on a headline, before any of the stars.

Press /?/ to show which keys do what

#+begin_src emacs-lisp :tangle yes
  (setq org-use-speed-commands t)
#+end_src
**** File config
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-directory "~/Documents/org")

  (setq org-agenda-files
        (append '("~/.emacs.d")
                (seq-filter
                 (lambda(path)
                   (not (string-match "/Archive/" path)))
                 (seq-uniq
                  (mapcar 'file-name-directory
                          (directory-files-recursively "~/Documents/org/" "\\.org$"))))))


  ;; Set default file for org-capture
  (setq org-default-notes-file (concat org-directory "/notes.org"))

#+END_SRC

**** Visuals

***** Some styling
****** headings
Not sure about these yet
#+begin_src emacs-lisp :tangle no
  ;; set basic title font
  (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
  ;; Low levels are unimportant => no scaling
  (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
  ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
  (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.05) ;\large
  (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.10) ;\Large
  (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.15) ;\LARGE
  ;; Only use the first 4 styles and do not cycle.
  (setq org-cycle-level-faces nil)
  (setq org-n-level-faces 4)
#+end_src

****** title
Hide the =#+title:= keyword

#+begin_src emacs-lisp :tangle yes
  (setq org-hidden-keywords '(title))
#+end_src

***** Hide markers (bold, italic,...)
#+begin_src emacs-lisp :tangle yes
  (setq org-hide-emphasis-markers t)
#+end_src

but also show them interactively, when cursor is on element
#+begin_src emacs-lisp :tangle yes
  (use-package org-appear
    :hook
    (org-mode . org-appear-mode))
#+end_src
***** indent by default
Org can *virtually* indent the contents of subheadings.

One can set this buffer-local by using the =STARTUP= keyword
#+begin_example org
  #+STARTUP: indent
  #+STARTUP: noindent
#+end_example

To set it globally, customize =org-startup-indented=

#+begin_src emacs-lisp :tangle yes
  (setq org-startup-indented t)
#+end_src

***** bullets

A nicer way to represent hierarchy
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-superstar
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

****** TODO customize leading bullets
#+begin_src emacs-lisp :tangle no
  (customize-variable org-superstar-leading-bullet)
#+end_src


***** sticky headers
This package displays in the header-line the Org heading for the node that’s at the top of the window. This way, if the heading for the text at the top of the window is beyond the top of the window, you don’t forget which heading the text belongs to. The display can be customized to show just the heading, the full outline path, or the full outline path in reverse.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-sticky-header
    :config (setq org-sticky-header-full-path 'full)
            (setq org-sticky-header-always-show-header t)
            (setq org-sticky-header-heading-star ">")
    :hook (org-mode . org-sticky-header-mode))
#+end_src
***** Variable pitch mode for org
#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook 'variable-pitch-mode)

  (custom-theme-set-faces
     'user
     '(org-block ((t (:inherit fixed-pitch))))
     '(org-code ((t (:inherit (shadow fixed-pitch)))))
     ;;'(org-document-info ((t (:foreground "dark orange"))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
     ;;'(org-link ((t (:foreground "royal blue" :underline t))))
     '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-drawer ((t (:inherit fixed-pitch))) t)
     '(org-property-value ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
     '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
     '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src
**** Tasks and States

Borrowing heavily from [[http://doc.norang.ca/org-mode.html#TasksAndStates][norang.ca]]

A global set of TODO keywords

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "BUSY(b)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "CALL" "MEETING"))))

#+end_src
**** Org-agenda

Org agenda is highly customisable, here I just start of with showing the =OWNER= property if it is set. This signifies a task is not on my list but just for me to follow up.

#+begin_src emacs-lisp :tangle yes
  (use-package org-agenda-property
    :after org
    :custom
    (org-agenda-property-list '("OWNER"))
    (org-agenda-property-position 'next-line))
#+end_src

**** Capture templates

Define some capture templates

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-protocol)
  (setq org-capture-templates
        (quote (("t" "TODO" entry (file "~/Documents/org/refile.org")
                 "* TODO %? %^G\n  %U\n")
                ("r" "respond" entry (file "~/Documents/org/refile.org")
                 "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n")
                ("n" "note" entry (file "~/Documents/org/refile.org")
                 "* %? :NOTE:\n%U\n%a\n")
                ("a" "interesting app" entry (file "~/Documents/org/interesting_apps.org")
                 "* %? \n")
                ("j" "journal entry" entry (function org-journal-find-location)
                 "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
                ("s" "org-protocol selection" entry (file "~/Documents/org/refile.org")
                 "* %?\n  %a\n  %i")
                ("l" "org-protocol link" entry (file "~/Documents/org/refile.org")
                 "* %?\n  %a")
                ("m" "Meeting" entry (file "~/Documents/org/refile.org")
                 "* MEETING with %? :MEETING:\n%U")
                ("p" "Phone call" entry (file "~/Documents/org/refile.org")
                 "* PHONE %? :PHONE:\n%U")
                ("h" "Habit" entry (file "~/Documents/org/refile.org")
                 "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

#+end_src


Maybe look in to clocking from http://doc.norang.ca/org-mode#CaptureTemplates

**** Org protocol
To get org-protocol working I had to create a desktop file and update the database
source: https://cestlaz.github.io/post/using-emacs-70-org-protocol/

#+begin_src conf :tangle no
  [Desktop Entry]
  Name=EmacsClient as org-protocol handler
  Exec=emacsclient %u
  Icon=emacs
  Type=Application
  Terminal=false
  Categories=System;
  MimeType=x-scheme-handler/org-protocol;
#+end_src
place this in ~/.local/share/applications

then run
#+begin_example sh
  update-desktop-database ~/.local/share/applications
#+end_example

***** test org protocol from command line
#+begin_example sh
  emacsclient "org-protocol://store-link?url=URL&title=TITLE"
#+end_example

***** Capture links from your browser by adding this bookmarklet
Org link capturing seems spotty at best in current firefox
#+begin_src js :tangle no
  javascript:location.href='org-protocol://store-link?' +
        new URLSearchParams({url:location.href, title:document.title});
#+end_src

***** TODO could I get org-capture to use yequake?
Curently not always visible where the capture buffer will pop up.
workaround is to just open a buffer next to where you're capturing...
***** Maybe look in to full page capturing using pandoc?
https://github.com/alphapapa/org-protocol-capture-html#org-protocol-instructions

**** Org capture Quake style
https://github.com/alphapapa/yequake#org-capture
One bug of note:
When closing the window without capturing, the latest buffer will switch.
https://github.com/alphapapa/yequake/issues/6


relevant part of i3 config:
#+begin_src conf
  bindsym $mod+c exec emacsclient -n -s main -e '(yequake-toggle "org-capture")'
  for_window [title="yequake-org-capture" class="Emacs"] floating enable
#+end_src

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yequake
    :custom
    (yequake-frames
     '(("org-capture"
        (buffer-fns . (yequake-org-capture))
        (width . 0.5)
        (height . 0.5)
        (top . 0.5)
        (frame-parameters . ((title . "yequake-org-capture")
                             (undecorated . t)
                             (internal-border-width . 15)))))))
#+end_src

**** Babel

Org-babel allows you to add src blocks etc.

The code in SRC blocks can be evaluated, languages have to be permitted though.
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-do-load-languages
     'org-babel-load-languages
     '((js . t)
       (shell . t)
       (org . t)
       (python . t)
       (ditaa . t)
       (plantuml . t)))
#+END_SRC

plantuml also needs to know where to find the jar

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
#+end_src

**** export

***** Activate built-in backends

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-export-backends '(ascii html icalendar latex md))
#+end_src

***** from =/contrib=

Install org-with-contrib!

****** TODO reveal.js                                               :install:
[[https://github.com/yjwen/org-reveal/][github]]

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'ox-reveal)
#+end_src

****** org-mime
[[http://orgmode.org/worg/org-contrib/org-mime.html][orgmode.org]]
Allows org mode text in mails to be exported to html mails. Text will be kept, html will be added as a =multipart/alternatives=.
Iffy with attachments and pgp though.

There are two ways of working with this.

- Call =org-mime-htmlize= when you want to htmlize org content from a =compose= buffers.
- Call =org-mime-org-buffer-htmlize= to send a buffers, narrowed subtree or region to a new =compose= buffer.

Adding ~#+OPTIONS: toc:nil~ might be a good idea.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-mime)
#+END_SRC

****** ox-hugo
#+BEGIN_SRC emacs-lisp :tangle yes
  (with-eval-after-load 'ox
    (use-package ox-hugo))

#+END_SRC

****** org-tempo
enabled expansion of <s style stuff from org-structure-template-alist
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-tempo)

#+END_SRC
**** TODO org-download
Drag and drop images to org-mode
[[https://github.com/abo-abo/org-download][github]] / [[https://www.youtube.com/watch?v%3DdAojpHR-6Uo][youtube demo]]
**** TODO org-beautify-theme
Prettify org buffers
[[https://github.com/jonnay/emagicians-starter-kit/blob/master/themes/org-beautify-theme.org][github]] / [[http://www.jonnay.net/bloggity-blog/2014/12/29_making-org-mode-typography-suck-a-little-less.html][blogpost]]
**** some help
***** helm-orgcard
Browse the orgcard with helm

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-orgcard
    :requires helm)
#+end_src
***** helm-org
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-org
    :general
    (keys/prefix/emspace
      "ha" #'consult-org-agenda
      "hb" #'consult-org-heading
      "hp" #'helm-org-parent-heading)
    :custom
    (helm-org-format-outline-path t))
#+end_src

A not as colourfull way to get these headings is by calling =org-refile= with the universal argument. (C-u C-c C-w)
Given all these are refile targets...

**** org-roam
Org Roam is supposed to be the next big thing in externalising your brain with emacs

#+BEGIN_SRC emacs-lisp :tangle yes
  (general-create-definer keys/roam
    :prefix "C-c n")
  (use-package org-roam
        :hook
        (after-init . org-roam-db-autosync-mode)
        :init
        (setq org-roam-v2-ack t)
        :custom
        (org-roam-directory (concat (file-name-as-directory org-directory) "Roam"))
        :config
        (setq org-roam-completion-system 'helm)
        (setq org-roam-mode-section-functions
              (list #'org-roam-backlinks-section
                    #'org-roam-reflinks-section
                    ;; #'org-roam-unlinked-references-section
                    ))
        (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))
        :general
        (keys/roam
         "f" 'org-roam-node-find
         "i" 'org-roam-node-insert
         "I" 'org-id-get-create
         "c" 'org-roam-capture
         "l" 'org-roam-buffer-toggle
         "L" 'org-roam-buffer-display-dedicated
         "g" 'org-roam-graph))

#+end_src

***** org-roam-ui
[[https://github.com/org-roam/org-roam-ui][org-roam/org-roam-ui: A graphical frontend for exploring your org-roam Zettelkasten]]

#+begin_src elisp :tangle yes
  (use-package org-roam-ui
    :after org-roam
    :hook
    (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start nil)
    :general
    (keys/roam
      "u" 'org-roam-ui-open
      "U" 'org-roam-ui-mode))
#+end_src

**** deft
#+begin_src emacs-lisp :tangle yes
  (use-package deft
    :after org org-roam
    :general
    (keys/roam
    "d" 'deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory org-directory))
#+end_src
**** org-journal
A better journaling experience?
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-journal
    :general
    (keys/roam
     "j" 'org-journal-new-entry)
    :custom
    (org-journal-date-prefix "#+TITLE: Journal entry for ")
    (org-journal-file-format "%Y-%m-%d.org")
    (org-journal-dir (concat org-directory "/journal"))
    (org-journal-date-format "%A, %d %B %Y"))
#+end_src
A helper function to use org-journal in with org-capture
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))
#+end_src
**** auto commit on save
By including a =.dir-locals.el= file on =org-directory=, enable the minor mode [[*git-auto-commit][git-auto-commit]]

#+begin_src emacs-lisp :tangle no
  ((nil . ((mode . git-auto-commit-mode)
           (gac-debounce-interval . 300)
           (gac-automatically-add-new-files-p . t))))
#+end_src
*** Chat (Matrix)
#+begin_src emacs-lisp :tangle yes
  (use-package plz
    :quelpa (plz
             :fetcher github
             :repo "alphapapa/plz.el"))
  (use-package ement
    :quelpa (ement
             :fetcher github
             :repo "alphapapa/ement.el")
    :after plz
    :requires plz)
#+end_src
*** Mail
**** general
***** citation
 #+BEGIN_SRC emacs-lisp :tangle yes
   ;; On this date X wrote
   (setq message-citation-line-format "On %A %Y-%m-%d %T %Z, %f wrote:\n")
   (setq message-citation-line-function 'message-insert-formatted-citation-line)
 #+END_SRC
**** mu4e
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package mu4e
      :requires async
      :load-path "/usr/share/emacs/site-lisp/mu4e"
      :commands mu4e
      :config
      (my/load-secrets "mu4e")
#+END_SRC
***** paths and files

Basic mu4e setup: paths to binaries and where to find and put files.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; use mu4e as default mailclient
  (setq mail-user-agent 'mu4e-user-agent ;; default mail client
        ;; osx
        ;;mu4e-mu-binary "/usr/local/bin/mu"
        ;;mu4e-get-mail-command "~/bin/offlineimap/offlineimap.py"
        mu4e-mu-binary "/usr/bin/mu"
        mu4e-get-mail-command "mbsync -a"
        mu4e-update-interval 7200
        mu4e-maildir "~/Maildir"
        mu4e-attachment-dir  "~/Downloads/mail-attachments"
        mu4e-action-tags-header "X-Keywords" ;; thanks to offlineimap gmail
        mu4e-attachment-dir "~/Downloads")
#+END_SRC

***** visual

#+BEGIN_SRC emacs-lisp :tangle yes
  ;;(add-hook 'mu4e-view-mode-hook 'window-margin-mode)

  ;; enable inline images
  (setq mu4e-view-show-images t
        mu4e-view-image-max-width 400)
  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  (setq mu4e-headers-fields '((:human-date . 15) (:flags . 4) (:mailing-list . 8) (:from-or-to . 22) (:thread-subject))
        mu4e-headers-date-format "%a %y/%m/%d %p"
        mu4e-headers-time-format "%T")

  ;; show full email
  (setq mu4e-view-show-addresses t)

  ;; do not spam the minibuffer about updates
  (setq mu4e-hide-index-messages t)

  ;; hide duplicates by default
  (setq mu4e-headers-skip-duplicates t)
#+END_SRC

****** fancy chars

mu4e can use fancy characters in the header view

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; use fancy characters for marks only, not the threading
  (setq mu4e-use-fancy-chars 'marks)
#+END_SRC

****** html to text conversion

A very basic html stripper

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; convert html messages
  (setq mu4e-html2text-command "w3m -dump -s -T text/html -o display_link_number=true -cols 85")
#+END_SRC

Emacs 24.4 added shr.el, which does a better job at showing HTML.
(It is also used in eww). It does feel a bit slow though

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package mu4e-contrib)
  (setq mu4e-html2text-command 'html-to-markdown)
#+END_SRC

But I prefer to read text emails...

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mu4e-view-prefer-html nil)
#+end_src

***** behaviour
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  ;; solved in contexts now

  ;; don't keep message buffers around when exiting mu4e
  (setq message-kill-buffer-on-exit t)

  ;; Strip addresses from mu4e-user-mail-address-list when replying.
  (setq mu4e-compose-dont-reply-to-self t)

  ;; apply marks when leaving headers buffer
  (setq mu4e-headers-leave-behavior 'apply)

  ;; Spellcheck FTW
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)

#+END_SRC
****** scrolling the headers
When the buffer "*mu4e-view" is visible and you move to the next or previous message,
the headers will follow, but not in a smooth-scrolling way

This is a little workaround to make that happen. (the value on recenter does not work
as advertised)
This could probably be made a bit more DRY.

inspired by this email thread [[mu4e:msgid:87tx4g1n8a.fsf@gmail.com][Re: {Got} nice scrolling behaviour in header view]]

#+BEGIN_SRC emacs-lisp :tangle no
(defadvice mu4e-view-headers-next (around scroll-down-mu4e-header activate)
  "Recenter the mu4e-header window around the visible header when moving onto
next email"
  (with-selected-window (get-buffer-window mu4e~headers-buffer t) (recenter 1))
  ad-do-it)

(defadvice mu4e-view-headers-prev (around scroll-up-mu4e-header activate)
  "Recenter the mu4e-header window around the visible header when moving onto
previous email"
  (with-selected-window (get-buffer-window mu4e~headers-buffer t) (recenter -1))
  ad-do-it)
#+END_SRC

***** crypto
epa-mail-mode allows you to:
- C-c C-e e :: encrypt
- C-c C-e s :: sign
#+BEGIN_SRC emacs-lisp :tangle yes

  (setq mu4e-auto-retrieve-keys t)
  (add-hook 'mu4e-compose-mode-hook 'epa-mail-mode)
  ;; (add-hook 'mu4e-view-mode-hook 'epa-mail-mode)

#+end_src

***** maildirs

I'm currently using offlineimap to sync all mail and then use tags (also see [[*tags][tags]])
So this is just for reference:

#+BEGIN_SRC emacs-lisp :tangle no
  ;; (setq mu4e-maildir-shortcuts
  ;;      '( (my/mu4e-maildir-pers . ?j)
  ;;         (my/mu4e-maildir-pro . ?t)))
#+END_SRC

***** bookmarks

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'mu4e-bookmarks
               '( :name  "Unread - lists"
                  :query "flag:unread AND flag:list AND NOT flag:trashed"
                  :key   ?l))
  (add-to-list 'mu4e-bookmarks
               '( :name  "Unread - no lists, today"
                  :query "flag:unread and date:today..now AND NOT flag:trashed"
                  :key   ?d))
  (add-to-list 'mu4e-bookmarks
               '( :name  "Unread - no lists"
                  :query "flag:unread AND NOT flag:list AND NOT flag:trashed"
                  :key   ?b))
  (add-to-list 'mu4e-bookmarks
               '( :name  "Flagged"
                  :query "flag:flagged"
                  :key   ?+) t)
#+END_SRC

***** actions

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'mu4e-view-actions
               '("retag-message" . mu4e-action-retag-message) t)
  (add-to-list 'mu4e-headers-actions
               '("retag-message" . mu4e-action-retag-message) t)

  (defun my/mu4e-action-archive-message (msg)
    (mu4e-action-retag-message msg "-\\Inbox"))

  (defun my/mu4e-action-trash-message (msg)
    (mu4e-action-retag-message msg "-\\Inbox +\\Trash"))
      ;;(mu4e~proc-move docid nil  "+T-N"))

  ;; TODO: look in to mu4e-mark-execute-all
  ;; TODO: check if tags are gmail tags before executing
  ;; this would probably be better if executed by mu4e-mark-execute-all
  (defun my/mu4e-action-all-marked (ignored)
    (mu4e-headers-for-each
     (lambda (msg)
       (let ((docid (mu4e-message-field msg :docid)))
        (when (mu4e-mark-docid-marked-p docid)
          (my/mu4e-action-trash-message msg))))))

  (add-to-list 'mu4e-headers-actions
               '("xtrash all marked" . my/mu4e-action-all-marked) t)
  (add-to-list 'mu4e-view-actions
               '("xtrash all marked" . my/mu4e-action-all-marked) t)


  (add-to-list 'mu4e-view-actions
               '("earchive-message" . my/mu4e-action-archive-message) t)
  (add-to-list 'mu4e-headers-actions
               '("earchive-message" . my/mu4e-action-archive-message) t)
  (add-to-list 'mu4e-view-actions
               '("trash message" . my/mu4e-action-trash-message) t)
  (add-to-list 'mu4e-headers-actions
               '("trash message" . my/mu4e-action-trash-message) t)
  (add-to-list 'mu4e-view-actions
               '("View in browser" . mu4e-action-view-in-browser) t)
#+END_SRC

****** TODO fix trashing

***** composing

****** Define from which account the mail will be sent
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/mu4e-set-account ()
    "Set the account for composing a new message."
    (let* ((account
            (if mu4e-compose-parent-message
                (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                  (string-match "/\\(.*?\\)/" maildir)
                  (match-string 1 maildir))
              (completing-read (format "Compose with account: (%s) "
                                       (mapconcat #'(lambda (var) (car var)) my/mu4e-account-alist "/"))
                               (mapcar #'(lambda (var) (car var)) my/mu4e-account-alist)
                                       nil t nil nil (caar my/mu4e-account-alist))))
            (account-vars (cdr (assoc account my/mu4e-account-alist))))
           (if account-vars
               (mapc #'(lambda (var)
                         (set (car var) (cadr var)))
                     account-vars)
             (error "No email account found"))))

  ;; (add-hook 'mu4e-compose-pre-hook 'my/mu4e-set-account)
#+END_SRC

****** Set modes
Try to create a more pleasant, non auto-fill writing experience

#+begin_src emacs-lisp :tangle yes
  (defun my/do-compose-stuff ()
    "My settings for message composition."
    (olivetti-mode)
    (olivetti-set-width 98)
    (auto-fill-mode -1)
    (flyspell-mode))

  (add-hook 'mu4e-compose-mode-hook 'my/do-compose-stuff)
#+end_src


***** sending

Mail can be sent synchronously or asynchronously.
Going with synchronous for now.

Also, make sure gnutls are installed (for signing/encrypting messages)

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smtpmail)
  ;;(use-package smtpmail-async)
  (setq ;; send-mail-function 'async-smtpmail-send-it
        ;; message-send-mail-function 'async-smtpmail-send-it
        message-send-mail-function 'smtpmail-send-it
        starttls-use-gnutls t
        ;; message queue for offline sending
        smtpmail-queue-mail nil ;; start in non-queueing mode
        smtpmail-queue-dir "~/Maildir/queue/cur"
        ;; set to t to enable debugging...
        smtpmail-debug-info nil
        ;;smtpmail-debug-verb nil
        )

  ;; alternatively, for emacs-24 you can use:
  ;;(setq message-send-mail-function 'smtpmail-send-it
  ;;     smtpmail-stream-type 'starttls
  ;;     smtpmail-default-smtp-server "smtp.gmail.com"
  ;;     smtpmail-smtp-server "smtp.gmail.com"
  ;;     smtpmail-smtp-service 587)
#+END_SRC

***** mu4e and org
mu4e allows you to store links to mail messages by default. See [[info:mu4e#Org-mode links][mu4e#Org-mode links]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-mu4e)

#+end_src

***** mu4e notifications                                       :disabled:

#+BEGIN_SRC emacs-lisp :tangle no
(mu4e-alert-set-default-style 'libnotify)
(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
#+end_src

****** TODO fix mu4e alerts, if I want them...
Will probably require
[[https://github.com/iqbalansari/mu4e-alert#libnotify][iqbalansari/mu4e-alert: Desktop notifications and modeline display for mu4e]]

***** close req-package
#+BEGIN_SRC emacs-lisp :tangle yes
)
#+END_SRC

****** TODO There's a lot in here
But simply closing the call to =use-package= in [[*mu4e][mu4e]] breaks stuff.
***** some inspiration
http://pablo.rauzy.name/dev/init.el.html
https://github.com/magnars/.emacs.d/blob/c1a481c9ba85ab3127bb77c7b60689abbbeb5611/setup-mu4e.el
https://github.com/agpchil/mu4e-maildirs-extension
https://bitbucket.org/seanfarley/dotfiles/src/69cbcf0dd9d6cb2c7aaa18e7a196315035ad4181/emacs/init/mail.el?at=default

reference
https://github.com/djcb/mu/blob/master/mu4e/mu4e-actions.el

****** TODO org and mu4e
[[mu4e:msgid:m2pphdpjyc.fsf@gmail.com][yet another mu4e/org solution]]
***** TODO mail attachments with dired
#+BEGIN_EXAMPLE emacs-lisp
;; Attach files via dired
;; mark, C-c RET C-a
;; from http://www.djcbsoftware.nl/code/mu/mu4e/Attaching-files-with-dired.html#Attaching-files-with-dired

(use-package gnus-dired)

;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
     	(when (and (derived-mode-p 'message-mode)
                   (null message-sent-message-via))
     	  (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_EXAMPLE
**** reading mail
Set xdg to open *.eml files with emacs
#+BEGIN_SRC sh
  xdg-mime default emacs.desktop message/rfc822
#+END_SRC

and then


#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.eml$" . mail-mode))
#+END_SRC
*** RSS feeds
**** [[https://github.com/skeeto/elfeed][elfeed]]

#+begin_src emacs-lisp :tangle yes
  (use-package elfeed)
  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/.elfeed.org")))
#+end_src

** Minor modes
*** editorconfig                                                 :mode:minor:
#+BEGIN_QUOTE
EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.
#+END_QUOTE
More info on the [[http://editorconfig.org/][editorconfig website]].

You will need to put an (or more) /.editorconfig/ file in your dirs
And editorconfig-core needs to be installed
#+BEGIN_EXAMPLE .editorconfig
  # EditorConfig is awesome: http://EditorConfig.org

  # top-most EditorConfig file
  root = true

  # Unix-style newlines with a newline ending every file
  [*]
  end_of_line = lf
  insert_final_newline = true

  # 4 space indentation
  [*.py]
  indent_style = space
  indent_size = 4

  # Tab indentation (no size specified)
  [*.js]
  indent_style = tab

  # Indentation override for all JS under lib directory
  [lib/**.js]
  indent_style = space
  indent_size = 2

  # Matches the exact files either package.json or .travis.yml
  [{package.json,.travis.yml}]
  indent_style = space
  indent_size = 2
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package editorconfig
    :config (editorconfig-mode 1))
#+END_SRC

*** Completion and selection
**** helm

Helm is an incremental completion and selection framework for emacs.
Read more here: http://emacs-helm.github.io/helm/

Helm autoresize heights are set in percentages. If set to the same
amount, the helm buffer will be fixed size.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package async)
  (use-package helm-ag)
  (use-package helm-swoop)
  (use-package helm-flx)
  (use-package helm
    :requires (async helm-ag helm-swoop helm-flx)
    :general
    ("C-c h" 'helm-command-prefix)
    ;;("M-x" 'helm-M-x)
    ;;("M-y" 'helm-show-kill-ring)
    ;;("C-c b" 'helm-bookmarks)
    ;;("C-x b" 'helm-buffers-list)
    ("C-c h o" 'helm-occur)
    ("C-c h SPC" 'helm-all-mark-rings)
    ("C-c h g" 'helm-do-ag)
    ("C-c h s" 'helm-swoop)
    :config
    (setq helm-M-x-fuzzy-match t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-autoresize-max-height 40
          helm-autoresize-min-height 10)
    :init (helm-autoresize-mode 1)
          (helm-flx-mode +1)
          ;;(helm-mode 1))
          )
#+END_SRC
**** Helm alternative
All the kids rave about vertico/consult/marginalia/embark these days. Let's see what it's all abouth and if it can replace some or all of my helm stuff...
***** Vertico
[[https://github.com/minad/vertico][minad/vertico: vertico.el - VERTical Interactive COmpletion]]

Provides the list of candidates
#+begin_src emacs-lisp :tangle yes
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-count 15)
    (setq vertico-resize t))
#+end_src

And it takes history in to account, save this history beyond your current session
#+begin_src emacs-lisp :tangle yes
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

***** Orderless
Provides a way to drill down on candidates
#+begin_src emacs-lisp :tangle yes
    (use-package orderless
      :init
      (setq completion-styles '(substring partial-completion flex
                                orderless)
            completion-category-defaults nil
            completion-category-overrides '((file (styles partial-completion)))
            completion-ignore-case t))
#+end_src

***** Marginalia
Provides annotations on the candidates
#+begin_src emacs-lisp :tangle yes
  (use-package marginalia
    :general
    ("M-A" 'marginalia-cycle)
    :init
    (marginalia-mode))
#+end_src

***** Consult
Provides commands for completion
#+begin_src emacs-lisp :tangle yes

  (use-package consult
    :general
    ;;("C-c h" 'consult-history)
    ("C-c m" 'consult-mode-command)
    ("C-c b" 'consult-bookmark)
    ("C-c k" 'consult-kmacro)

    ("C-x M-:" 'consult-complex-command)     ;; orig. repeat-complex-command
    ("C-x b" 'consult-buffer)                ;; orig. switch-to-buffer
    ("C-x 4 b" 'consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
    ("C-x 5 b" 'consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame

    ("M-#" 'consult-register-load)
    ("M-'" 'consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
    ("C-M-#" 'consult-register)

    ("M-y" 'consult-yank-pop)                ;; orig. yank-pop
    ("<help> a" 'consult-apropos)            ;; orig. apropos-command

    ;; ("M-g e" 'consult-compile-error)
    ;; ("M-g f" 'consult-flymake)               ;; Alternative: consult-flycheck
    ;; ("M-g g" 'consult-goto-line)             ;; orig. goto-line
    ;; ("M-g M-g" 'consult-goto-line)           ;; orig. goto-line
    ("M-g o" 'consult-outline)               ;; Alternative: consult-org-heading
    ("M-g m" 'consult-mark)
    ("M-g SPC" 'consult-global-mark)
    ("M-g i" 'consult-imenu)
    ("M-g I" 'consult-imenu-multi)

    ("M-s f" 'consult-find)
    ("M-s F" 'consult-locate)
    ("M-s g" 'consult-grep)
    ("M-s G" 'consult-git-grep)
    ("M-s r" 'consult-ripgrep)
    ("M-s l" 'consult-line)
    ("M-s L" 'consult-line-multi)
    ("M-s m" 'consult-multi-occur)
    ("M-s k" 'consult-keep-lines)
    ("M-s u" 'consult-focus-lines)

    ("M-s e" 'consult-isearch-history)
    (:keymaps 'isearch-mode-map
              "M-e" 'consult-isearch-history         ;; orig. isearch-edit-string
              "M-s e" 'consult-isearch-history       ;; orig. isearch-edit-string
              "M-s l" 'consult-line                  ;; needed by consult-line to detect isearch
              "M-s L" 'consult-line-multi)           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI. You may want to also
    ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
    :hook (completion-list-mode . consult-preview-at-point-mode)


    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
  )
#+end_src

consult-dir
#+begin_src emacs-lisp :tangle yes
  (use-package consult-dir
    :ensure t
    :config
    (setq consult-dir-project-list-function #'consult-dir-projectile-dirs)
    (setq consult-dir-default-command #'dired)
    :general
    ("C-x C-d" 'consult-dir)
    (:keymaps 'vertico-map
              "C-x C-d" 'consult-dir
              "C-x C-j" 'consult-dir-jump-file))
#+end_src

***** Embark
#+begin_src emacs-lisp :tangle yes
  (use-package embark
    :ensure t

    :general
    ("C-." 'embark-act)
    ("M-." 'embark-dwim)
    ("C-h B" 'embark-bindings)

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

****** TODO embark to [[*ace-window][ace-window]]
#+begin_src emacs-lisp :tangle yes
  (eval-when-compile
    (defmacro my/embark-ace-action (fn)
      `(defun ,(intern (concat "my/embark-ace-" (symbol-name fn))) ()
         (interactive)
         (with-demoted-errors "%s"
           (require 'ace-window)
           (let ((aw-dispatch-always t))
             (aw-switch-to-window (aw-select nil))
             (call-interactively (symbol-function ',fn)))))))

  (general-define-key
   :keymaps 'embark-file-map
   "o" '(my/embark-ace-action 'find-file)
   :keymaps 'embark-buffer-map
   "o" '(my/embark-ace-action 'switch-to-buffer)
   :keymaps 'embark-bookmark-map
   "o" '(my/embark-ace-action 'bookmark-jump))
#+end_src
** Workspaces

*** Projectile                                                   :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package consult-projectile
    :requires consult)
  (use-package projectile
      :config
        ;; C-c p a now opens other file with same name - but different extension
        ;; Add this to switch between js and html file
        (progn (add-to-list 'projectile-other-file-alist '("js" . ("html")))
               (add-to-list 'projectile-other-file-alist '("html" . ("js")))
               (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
      :init
      (projectile-global-mode)
      (setq projectile-completion-system 'helm))
#+END_SRC
**** Keybindings                                                :keybindings:
"C-c p" followed by a key
*** Perspective                                       :mode:minor:disabled:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package perspective
    :custom
    (persp-sort (quote access))
    (persp-state-default-file "~/.config/emacs-perspectives")
    :config
    (persp-mode nil))
#+END_SRC
**** TODO replace with [[https://github.com/alphapapa/burly.el][Burly.el ?]]
** Bookmarks
I'm using the built in feature here
C-x r m : emacs maRk Make
C-x r l : emacs maRk list
C-x r b : jump to bookmark -> Now opens helm-bookmarks (see helm config)
- s to save (otherwise the bookmark does not survive the session)
- enter to open
- o to open in new window
- D mark for removal
- x execute removal
- r rename current item
** PDF

*** PDF-tools

PDF-tools is a package which provides a full pdf viewer/anotator in emacs.
It is availble form Melpa and acitvated by doing

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pdf-tools)
  (pdf-tools-install)
#+end_src

The different modes are fully documented (=M-x pdf-tools-help=),
but here are some keybindings to get you started:

- +,-,0 :: Zoom
- P,H,W :: fit Page, Height, Width
- B,N :: Back and Next in hostory

- C-c C-a :: prefix for annotations
  - h :: highlight region
  - m :: markup region (choose between highlight and others)
  - t :: text annotation
  - l :: list annotation
  - D :: delete annotation

  - o :: outline (in outline =.= moves the mark to the current page)

**** error while loading shared libs

You might get an error after updating poppler.

#+NAME: epdfinfo error
#+BEGIN_EXAMPLE
  "Error running `/home/jeroen/.emacs.d/.cask/24.5.1/elpa/pdf-tools-20150716.643/epdfinfo': /home/jeroen/.emacs.d/.cask/24.5.1/elpa/pdf-tools-20150716.643/epdfinfo: error while loading shared libraries: libpoppler.so.55: cannot open shared object file: No such file or directory""
#+END_EXAMPLE

To remedy, just remove the =epdfinfo= executable mentioned in the error and re-run =(pdf-tools-install)=

*** Interleave

Org notes linked to pdf pages

In an org document add the interleave heading linking to the pdf doc in question.

#+BEGIN_SRC org
  #+INTERLEAVE_PDF: /the/path/to/pdf.pdf
#+END_SRC

Then to =M-x interleave= to open the pdf alongside and =i= to add a note to the current page.

** External services

*** Gist                                                         :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package gist)

#+END_SRC

*** ix (pastebin)
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ix)
#+END_SRC

** Notifications

*** TODO sauron
An emacs event log with weight
[[https://github.com/djcb/sauron][github]]

* Tools for troubleshooting                                 :troubleshooting:
Some troubleshooting things are sprinkled through this file tagged with =:troubleshooting:=
Here is some other stuff that did not find a place elsewhere

** explain pauses
[[https://github.com/lastquestion/explain-pause-mode][lastquestion/explain-pause-mode: top, but for Emacs.]]
#+begin_src emacs-lisp :tangle no
  (load "explain-pause-mode")
  (explain-pause-mode t)
#+end_src

*** explain-pause usage                                             :usage:
=M-x explain-pause-top=

** Package x is deprecated (find dependants)
In your =*Messages*= buffer =(C-h e)=, you might get a warning like so:
#+begin_example
Package cl is deprecated
#+end_example

To find out which packages have this as a dependency:
#+begin_src elisp :tangle no
  (require 'loadhist)
  (file-dependents (feature-file 'cl))
#+end_src

* Fixing bugs

** 2015-01-16 discover.el messing with keybindings
see http://www.reddit.com/r/emacs/comments/2sbxun/help_undotreemode_eating_bindings/

solution: uncomment following lines from [[file:~/.emacs.d/.cask/24.4.1/elpa/discover-20140103.1339/discover.el][discover.el]]

#+BEGIN_EXAMPLE emacs-lisp
  ;;;Rectangles - C-x r ...
  368     ;;(rectangles nil nil "C-x r")
  369     ;; Isearch
  370     ;;(isearch nil nil "M-s")
#+END_EXAMPLE

** TODO eyebrowse?

** Packages with issues after moving away from cask etc

*** TODO ob-restclient in [[*Babel][Babel]]                                     :install:
 #+begin_example emacs-lisp :tangle no
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((js . t)
      (shell . t)
      (org . t)
      (python . t)
      (ditaa . t)
      (plantuml . t)
      --> (restclient . t)))
 #+end_example
