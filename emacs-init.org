* Emacs Org Configuration
* Description
This file is tangled by init.el using =org-babel-load-file=. What this does is generate a =emacs-init.el= from the =emacs-lisp= source blocks.
* Prerequisites
** git
** cask
An emacs package manager: http://cask.github.io/installation.html
* Package Management

[[https://github.com/rdallasgray/pallet][Pallet]] is a very helpful package management tool for Emacs. 
It utilizes a dependency management platform called [[https://github.com/cask/cask][Cask]], 
to update a centralized =Cask= file when you install or remove packages.

** Cask
Cask is initialized in =init.el= with the following:
#+BEGIN_SRC emacs-lisp :tangle no
(require 'cask "~/.cask/cask.el")
(cask-initialize)
#+END_SRC

** Pallet
You can download all packages in your =Cask= file by using =M-x pallet-install=.
However, this should not be necessary.

** Install Packages
- Install [[https://github.com/cask/cask][Cask]].
- Run =cask install= in =$HOME/.emacs.d/=.

* The config
** Dependency Management with =req-package=

Where Pallet keeps track of the packages we have installed, =req-package=
handles all our internal package dependencies and configurations.

#+BEGIN_QUOTE
[[https://github.com/edvorg/req-package][req-package]] is a wrapper on top of [[https://github.com/jwiegley/use-package][use-package]], a package dependency
management tool. The documentation for =use-package= is immensely helpful for
figuring out how to describe package dependencies and settings. =req-package=
adds the =:require= keyword which allows you to define dependencies between
related packages.
#+END_QUOTE

Start using =req-package=
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'req-package)
  (req-package pallet)
#+END_SRC

** System
First find out wether we're working on OSX or not

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Are we on a mac?
  (setq is-osx (equal system-type 'darwin))

  ;; On OS X GUI applications do not inherit variables from the shell
  ;; configuration and thus have a different $PATH
  ;; test by doing "M-: (executable-find "flake8")"
  ;; C-h v exec-path
  (when is-osx (exec-path-from-shell-initialize))
#+END_SRC

** Basics
Some essential customizations.
*** The interface
**** TODO Remove UI components
We defined earlier whether we are running on OSX. The variable =window-system= tells us in which window system we're running, if at all.

#+BEGIN_SRC emacs-lisp :tangle no
    ;; Turn off mouse interface early in startup to avoid momentary display
    ;; menu can exist on osx when run as cocoa app
    (if (and is-osx (eq window-system "ns"))
          (if (fboundp 'menu-bar-mode) (menu-bar-mode t)
          (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

**** Interface defaults
Some sensible defaults

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; No splash screen
  (setq inhibit-startup-message t)

  ;; Full path in frame title
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

  ;; don't beep but flash the screen
  ;; font-lock-mode provides the colors for spec languages, set max fontification (1-3)
  ;; force color theme (no increments)
  ;; don't truncate on partial width
  (setq visible-bell t
        font-lock-maximum-decoration t
        color-theme-is-global t
        truncate-partial-width-windows nil)

  ;; Enable syntax highlighting for older Emacsen that have it off
  (global-font-lock-mode t)

  ;; Highlight current line
  (global-hl-line-mode 1)

  ;; Don't defer screen updates when performing operations
  (setq redisplay-dont-pause t)

  ;; Highlight matching parentheses when the point is on them.
  (show-paren-mode 1)

  (blink-cursor-mode -1)

  ;; Show active region
  (transient-mark-mode 1)
  (make-variable-buffer-local 'transient-mark-mode)
  (put 'transient-mark-mode 'permanent-local t)
  (setq-default transient-mark-mode t)


  ;; Show me empty lines after buffer end
  (set-default 'indicate-empty-lines t)

  ;; smaller cursor
  (setq cursor-type 'bar)

#+END_SRC  

**** Appearance
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; install some extra themes
  (req-package zenburn-theme)
  (req-package heroku-theme)

  ;; easily switch between all themes
  (req-package themepark-mode)

  ;; the current theme of choice
  (load-theme 'tango t)

  ;; set the font
  (if is-osx
      (set-face-attribute 'default nil :family "source code pro" :weight "light")
      (set-default-font "SourceCodePro-10"))

#+END_SRC
*** Interaction defaults

#+BEGIN_SRC emacs-lisp :tangle yes
    ;; Auto refresh buffers when edits occur outside emacs
    (global-auto-revert-mode 1)

    ;; Save point position between sessions
    (req-package saveplace
                 :init
                 (setq-default save-place t)
                 :config
                 (setq save-place-file (expand-file-name ".places" user-emacs-directory)))

    ;; this is disabled by default
    (put 'narrow-to-region 'disabled nil)

    ;; Save a list of recent files visited. (open recent file with C-x f)
    (recentf-mode 1)
    (setq recentf-max-saved-items 100) ;; just 20 is too recent

    ;; Undo/redo window configuration with C-c <left>/<right>
    (winner-mode 1)

    ;; Never insert tabs
    (set-default 'indent-tabs-mode nil)

    ;; Easily navigate sillycased words
    (global-subword-mode 1)

    ;; Don't break lines for me, please
    ;; This is nicer with 'visual-line-mode (and adaptive wrap)
    (setq-default truncate-lines t)

    ;; Keep cursor away from edges when scrolling up/down
    (req-package smooth-scrolling)

    ;; Allow recursive minibuffers
    ;; (setq enable-recursive-minibuffers t)

    ;; Don't be so stingy on the memory, we have lots now. It's the distant future.
    (setq gc-cons-threshold 20000000)

    ;; Represent undo-history as an actual tree (visualize with C-x u)
    (req-package undo-tree
                 :init
                 (global-undo-tree-mode)
                 :config
                 (setq undo-tree-mode-lighter ""))

    ;; Sentences do not need double spaces to end. Period.
    (set-default 'sentence-end-double-space nil)

    ;; Add parts of each file's directory to the buffer name if not unique
    ;; not available on MELPA
    (req-package uniquify
                 :init
                 (setq uniquify-buffer-name-style 'forward))

    ;; A saner ediff
    (setq ediff-diff-options "-w")
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)

    ;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
    ;; that you can always see what's happening.
    (setq eval-expression-print-level nil)

    ;; When popping the mark, continue popping until the cursor actually moves
    ;; Also, if the last command was a copy - skip past all the expand-region cruft.
    (defadvice pop-to-mark-command (around ensure-new-position activate)
      (let ((p (point)))
        (when (eq last-command 'save-region-or-current-line)
          ad-do-it
          ad-do-it
          ad-do-it)
        (dotimes (i 10)
          (when (= p (point)) ad-do-it))))

    ;; Smart M-x : ido like interactivity for M-x
    ;; when ido-ubiquitous is used, smex is just used to keep
    ;; a history of last used commands.
    ;; TODO: check previous statement about smex and ido-ubiquitous
    (req-package smex
                 :require ido
                 :init
                 (smex-initialize)
                 :bind
                 (("M-x" . smex)
                  ("M-X" . smex-major-mode-commands)
                  ("C-c C-c M-x" . execute-extended-command)))

    ;; Hide mousepointer when typing
    (setq make-pointer-invisible t)

    ;; erc made the pointer go off screen, forcing a recenter
    ;; oufo on #emacs suggested this: (works great)
    (setq scroll-conservatively 1000)


#+END_SRC

** Packages
** Major modes

*** comint-mode
    Comint-mode is a major mode for interaction with an inferior interpreter.
    Shells etc use comint mode.
    When the buffer gets large, emacs gets slow, we'll truncate when new lines are added
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; truncate comint buffers after x lines
      (setq comint-buffer-maximum-size 5000)
      (add-hook 'comint-output-filter-functions 'comint-truncate-buffer)
    #+END_SRC
    
*** Org
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
  (setq org-replace-disputed-keys t)

  ;; Fontify org-mode code blocks
  (setq org-src-fontify-natively t)
#+END_SRC
*** magit
#+BEGIN_SRC emacs-lisp :tangle yes
    (req-package magit
                 :bind
                 ("C-x m" . magit-status))
#+END_SRC
** Minor modes
*** ido
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package ido
               :require
               (flx flx-ido ido-vertical-mode ido-ubiquitous ido-at-point)
               :init
               (progn (ido-mode t)
                      (flx-ido-mode t)
                      (ido-vertical-mode)
                      (ido-at-point-mode)
                      (ido-ubiquitous-mode t))
               :config
               (setq ido-enable-flex-matching t
                     ido-case-fold nil
                     ido-auto-merge-work-directories-length 5
                     ido-create-new-buffer 'always
                     ido-use-filename-at-point nil
                     ido-max-prospects 10
                     ido-use-faces nil))
#+END_SRC




#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package-finish)
#+END_SRC































* Not used
** From init.el
#+BEGIN_SRC emacs-lisp :tangle no
  ;; Set up load path
  (setq loadpath-mine (expand-file-name "conf" user-emacs-directory))
  (setq loadpath-vendor (expand-file-name "vendor" user-emacs-directory))

  (add-to-list 'load-path loadpath-mine)
  (add-to-list 'load-path loadpath-vendor)

  (require '_packages)
  (require '_global)
  (require '_appearance)
  (require '_key_bindings)

  (require 'theme-park-mode)

  ;; Functions (load all files in defuns-dir)
  (setq defuns-dir (expand-file-name "defuns" user-emacs-directory))
  (dolist (file (directory-files defuns-dir t "\\w+"))
    (when (file-regular-p file)
      (load file)))

  (when is-mac (require '_mac))
  

#+END_SRC

** Packages

** global

** appearance
   
** key bindings
   
** mac

