* Emacs Org Configuration
* Description
This file is tangled by init.el using =org-babel-load-file=. What this does is generate a =emacs-init.el= from the =emacs-lisp= source blocks.
* Prerequisites
** git
** cask
An emacs package manager: http://cask.github.io/installation.html
* Package Management

[[https://github.com/rdallasgray/pallet][Pallet]] is a very helpful package management tool for Emacs. 
It utilizes a dependency management platform called [[https://github.com/cask/cask][Cask]], 
to update a centralized =Cask= file when you install or remove packages.

** Cask
Cask is initialized in =init.el= with the following:
#+BEGIN_SRC emacs-lisp :tangle no
(require 'cask "~/.cask/cask.el")
(cask-initialize)
#+END_SRC

** Pallet
You can download all packages in your =Cask= file by using =M-x pallet-install=.
However, this should not be necessary.

** Install Packages
- Install [[https://github.com/cask/cask][Cask]].
- Run =cask install= in =$HOME/.emacs.d/=.

* The config
** Dependency Management with =req-package=

Where Pallet keeps track of the packages we have installed, =req-package=
handles all our internal package dependencies and configurations.

#+BEGIN_QUOTE
[[https://github.com/edvorg/req-package][req-package]] is a wrapper on top of [[https://github.com/jwiegley/use-package][use-package]], a package dependency
management tool. The documentation for =use-package= is immensely helpful for
figuring out how to describe package dependencies and settings. =req-package=
adds the =:require= keyword which allows you to define dependencies between
related packages.
#+END_QUOTE

Start using =req-package=
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'req-package)
  (req-package pallet)
#+END_SRC

** System
First find out wether we're working on OSX or not

#+BEGIN_SRC emacs-lisp :tangle yes
    ;; Are we on a mac?
    (setq is-osx (equal system-type 'darwin))

    ;; On OS X GUI applications do not inherit variables from the shell
    ;; configuration and thus have a different $PATH
    ;; test by doing "M-: (executable-find "flake8")"
    ;; C-h v exec-path
    (when is-osx (progn (req-package exec-path-from-shell)
                        (exec-path-from-shell-initialize)))
#+END_SRC

** Basics
   Some essential customizations.
*** The interface
**** Remove UI components
We defined earlier whether we are running on OSX. The variable =window-system= tells us in which window system we're running, if at all.

#+BEGIN_SRC emacs-lisp :tangle yes
    ;; Turn off mouse interface early in startup to avoid momentary display
    ;; menu can exist on osx when run as cocoa app
    (if (and is-osx (eq window-system "ns"))
        (if (fboundp 'menu-bar-mode) (menu-bar-mode t))
        (if (fboundp 'menu-bar-mode) (menu-bar-mode -1)))
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

**** Interface defaults
Some sensible defaults

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; No splash screen
  (setq inhibit-startup-message t)

  ;; Full path in frame title
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

  ;; don't beep but flash the screen
  ;; font-lock-mode provides the colors for spec languages, set max fontification (1-3)
  ;; force color theme (no increments)
  ;; don't truncate on partial width
  (setq visible-bell t
        font-lock-maximum-decoration t
        color-theme-is-global t
        truncate-partial-width-windows nil)

  ;; Enable syntax highlighting for older Emacsen that have it off
  (global-font-lock-mode t)

  ;; Highlight current line
  (global-hl-line-mode 1)

  ;; Don't defer screen updates when performing operations
  (setq redisplay-dont-pause t)

  ;; Highlight matching parentheses when the point is on them.
  (show-paren-mode 1)

  (blink-cursor-mode -1)

  ;; Show active region
  (transient-mark-mode 1)
  (make-variable-buffer-local 'transient-mark-mode)
  (put 'transient-mark-mode 'permanent-local t)
  (setq-default transient-mark-mode t)


  ;; Show me empty lines after buffer end
  (set-default 'indicate-empty-lines t)

  ;; smaller cursor
  (setq cursor-type 'bar)

#+END_SRC  

**** Appearance
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; install some extra themes
  (req-package zenburn-theme)
  (req-package heroku-theme)

  ;; easily switch between all themes
  (req-package themepark-mode)

  ;; the current theme of choice
  (load-theme 'tango t)

  ;; set the font
  (if is-osx
      (set-face-attribute 'default nil :family "source code pro" :weight "light")
      (set-default-font "SourceCodePro-10"))

#+END_SRC

**** Mode Line
#+BEGIN_SRC emacs-lisp :tangle yes
  (size-indication-mode t)

  (req-package smart-mode-line
               :config
               (progn (setq sml/theme 'respectfull)
                      ;; replace common paths
                      (add-to-list 'sml/replacer-regexp-list '("^/Volumes/devHD/" "::"))
                      (add-to-list 'sml/replacer-regexp-list '("^~/dev/" "::"))

                      ;; hide minor modes
                      (add-to-list 'sml/hidden-modes " Projectile")
                      (add-to-list 'sml/hidden-modes " ,")
                      (add-to-list 'sml/hidden-modes " Guide"))
               :init
               (sml/setup))

#+END_SRC
*** Interaction

**** Defaults
#+BEGIN_SRC emacs-lisp :tangle yes
    ;; Auto refresh buffers when edits occur outside emacs
    (global-auto-revert-mode 1)

    ;; Save point position between sessions
    (req-package saveplace
                 :init
                 (setq-default save-place t)
                 :config
                 (setq save-place-file (expand-file-name ".places" user-emacs-directory)))

    ;; this is disabled by default
    (put 'narrow-to-region 'disabled nil)

    ;; Save a list of recent files visited. (open recent file with C-x f)
    (recentf-mode 1)
    (setq recentf-max-saved-items 100) ;; just 20 is too recent

    ;; Undo/redo window configuration with C-c <left>/<right>
    (winner-mode 1)

    ;; Never insert tabs
    (set-default 'indent-tabs-mode nil)

    ;; Easily navigate sillycased words
    (global-subword-mode 1)

    ;; Don't break lines for me, please
    ;; This is nicer with 'visual-line-mode (and adaptive wrap)
    (setq-default truncate-lines t)

    ;; Keep cursor away from edges when scrolling up/down
    (req-package smooth-scrolling)

    ;; Allow recursive minibuffers
    ;; (setq enable-recursive-minibuffers t)

    ;; Don't be so stingy on the memory, we have lots now. It's the distant future.
    (setq gc-cons-threshold 20000000)

    ;; Represent undo-history as an actual tree (visualize with C-x u)
    (req-package undo-tree
                 :init
                 (global-undo-tree-mode)
                 :config
                 (setq undo-tree-mode-lighter ""))

    ;; Sentences do not need double spaces to end. Period.
    (set-default 'sentence-end-double-space nil)

    ;; Add parts of each file's directory to the buffer name if not unique
    ;; not available on MELPA
    (req-package uniquify
                 :init
                 (setq uniquify-buffer-name-style 'forward))

    ;; A saner ediff
    (setq ediff-diff-options "-w")
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)

    ;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
    ;; that you can always see what's happening.
    (setq eval-expression-print-level nil)

    ;; When popping the mark, continue popping until the cursor actually moves
    ;; Also, if the last command was a copy - skip past all the expand-region cruft.
    (defadvice pop-to-mark-command (around ensure-new-position activate)
      (let ((p (point)))
        (when (eq last-command 'save-region-or-current-line)
          ad-do-it
          ad-do-it
          ad-do-it)
        (dotimes (i 10)
          (when (= p (point)) ad-do-it))))

    ;; Smart M-x : ido like interactivity for M-x
    ;; when ido-ubiquitous is used, smex is just used to keep
    ;; a history of last used commands.
    ;; TODO: check previous statement about smex and ido-ubiquitous
    (req-package smex
                 :require ido
                 :init
                 (smex-initialize)
                 :bind
                 (("M-x" . smex)
                  ("M-X" . smex-major-mode-commands)
                  ("C-c C-c M-x" . execute-extended-command)))

    ;; Hide mousepointer when typing
    (setq make-pointer-invisible t)

    ;; erc made the pointer go off screen, forcing a recenter
    ;; oufo on #emacs suggested this: (works great)
    (setq scroll-conservatively 1000)


#+END_SRC

**** Some help
***** guide-key                                                  :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package guide-key
               :init
               (guide-key-mode 1)
               :config
               (setq guide-key/guide-key-sequence '("C-c p" ;; projectile
                                                    "C-c !" ;; flycheck
                                                    "C-x r" ;; ... stuff
                                                    "C-x 4" ;; file other window
                                                    "C-x v" ;; generic version controll
                                                    "C-x 8" ;; special chars
                                                    "C-x x" ;; persp
                                                    "H-x" ;; start apps
                                                    )
                     guide-key/recursive-key-sequence-flag t
                     guide-key/popup-window-position 'bottom))

#+END_SRC
**** expand-region                                               :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
    (req-package expand-region
                 :bind
                 ("C-=" . er/expand-region))
#+END_SRC

**** multiple-cursors                                            :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package multiple-cursors
               :bind
               (("C->" . mc/mark-next-like-this)
                ("C-<" . mc/mark-previous-like-this)
                ("C-c C-<" . mc/mark-all-like-this)
                ("C-c C->" . mc/edit-lines))) ;; adds a cursor to all lines in current region

#+END_SRC

**** smartparens                                                 :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
    (req-package smartparens-config
                 :require 
                 (smartparens)
                 :init
                 (smartparens-global-mode))

#+END_SRC
** Major modes

*** comint-mode                                                  :mode:major:
    Comint-mode is a major mode for interaction with an inferior interpreter.
    Shells etc use comint mode.
    When the buffer gets large, emacs gets slow, we'll truncate when new lines are added
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; truncate comint buffers after x lines
      (setq comint-buffer-maximum-size 5000)
      (add-hook 'comint-output-filter-functions 'comint-truncate-buffer)
    #+END_SRC
    
*** Org                                                          :mode:major:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
  (setq org-replace-disputed-keys t)

  ;; Fontify org-mode code blocks
  (setq org-src-fontify-natively t)
#+END_SRC
*** magit                                                        :mode:major:
#+BEGIN_SRC emacs-lisp :tangle yes
    (req-package magit
                 :bind
                 ("C-x m" . magit-status))
#+END_SRC
*** weechat                                                      :mode:major:
Weechat needs to be running.
Switched to erc though. This is just for reference
#+BEGIN_SRC emacs-lisp :tangle no
  ;; good source: https://github.com/the-kenny/.emacs.d/blob/master/site-start.d/weechat.el
  (req-package weechat
               :config
               (progn (setq weechat-modules '(weechat-button
                                              weechat-complete
                                              weechat-tracking
                                              ;;weechat-notifications
                                              )
                            weechat-host-default "localhost"
                            weechat-port-default 9000
                            weechat-mode-default 'plain
                            weechat-color-list
                            '(unspecified "black" "dark gray" "dark red" "red"
                                          "dark green" "light green" "brown"
                                          "yellow" "RoyalBlue3"
                                          "light blue"
                                          "dark magenta" "magenta" "dark cyan"
                                          "light cyan" "gray" "white")
                            weechat-prompt "> "
                            ;; weechat-notification-mode t
                            weechat-auto-monitor-buffers '("highmon" "#trickle")
                            weechat-complete-nick-ignore-self nil
                            weechat-button-buttonize-nicks nil
                            weechat-tracking-types '(:highlight (".+#trickle" . :message))
                            weechat-sync-active-buffer t
                            )
                      ;;(require 'gnutls)
                      ;;(add-to-list 'gnutls-trustfiles (expand-file-name (concat user-emacs-directory "/relay.crt")))
                      (set-face-background 'weechat-highlight-face "dark red")
                      (set-face-foreground 'weechat-highlight-face "light grey")
                      (add-hook 'weechat-mode-hook 'visual-line-mode)
                      ;; (add-hook 'weechat-mode-hook (lambda nil (load-theme-buffer-local 'tango (current-buffer))))
                      (tracking-mode)
                      ))

#+END_SRC
*** ERC
Emacs erc client
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC
** Minor modes
*** ido                                                          :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package ido
               :require
               (flx flx-ido ido-vertical-mode ido-ubiquitous ido-at-point)
               :init
               (progn (ido-mode t)
                      (flx-ido-mode t)
                      (ido-vertical-mode)
                      (ido-at-point-mode)
                      (ido-ubiquitous-mode t))
               :config
               (setq ido-enable-flex-matching t
                     ido-case-fold nil
                     ido-auto-merge-work-directories-length 5
                     ido-create-new-buffer 'always
                     ido-use-filename-at-point nil
                     ido-max-prospects 10
                     ido-use-faces nil))
#+END_SRC

*** editorconfig                                                 :mode:minor:
#+BEGIN_QUOTE
EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.
#+END_QUOTE
More info on the [[http://editorconfig.org/][editorconfig website]].

You will need to put an (or more) /.editorconfig/ file in your dirs

#+BEGIN_EXAMPLE .editorconfig
# EditorConfig is awesome: http://EditorConfig.org

# top-most EditorConfig file
root = true

# Unix-style newlines with a newline ending every file
[*]
end_of_line = lf
insert_final_newline = true

# 4 space indentation
[*.py]
indent_style = space
indent_size = 4

# Tab indentation (no size specified)
[*.js]
indent_style = tab

# Indentation override for all JS under lib directory
[lib/**.js]
indent_style = space
indent_size = 2

# Matches the exact files either package.json or .travis.yml
[{package.json,.travis.yml}]
indent_style = space
indent_size = 2
#+END_EXAMPLE 

#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package editorconfig)
#+END_SRC

** Workspaces

*** Projectile                                                   :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
    (req-package projectile
                 :init
                 (projectile-global-mode))
#+END_SRC
**** Keybindings                                                :keybindings:
"C-c p" followed by a key 
*** spaces                                                       :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package spaces)
#+END_SRC
** Language specifics
*** Javascript
**** Tern                                                        :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Set up the location of the tern .el files
  (if is-osx 
      (add-to-list 'load-path "~/.tern/emacs")
      (add-to-list 'load-path "/usr/local/lib/node_modules/tern/emacs"))

  (autoload 'tern-mode "tern.el" nil t)
  (eval-after-load 'tern
     '(progn
        (require 'tern-auto-complete)
        (tern-ac-setup)))

#+END_SRC

**** TODO gives error
eval-buffer: Cannot open load file: auto-complete




*** html & css

**** Emmet                                                       :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package emmet-mode)
#+END_SRC
** External services

*** Gist                                                         :mode:minor:
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package gist)

#+END_SRC


* The end
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package-finish)
#+END_SRC

* Not used
** From init.el
#+BEGIN_SRC emacs-lisp :tangle no
  ;; Set up load path
  (setq loadpath-mine (expand-file-name "conf" user-emacs-directory))
  (setq loadpath-vendor (expand-file-name "vendor" user-emacs-directory))

  (add-to-list 'load-path loadpath-mine)
  (add-to-list 'load-path loadpath-vendor)

  (require '_packages)
  (require '_global)
  (require '_appearance)
  (require '_key_bindings)

  (require 'theme-park-mode)

  ;; Functions (load all files in defuns-dir)
  (setq defuns-dir (expand-file-name "defuns" user-emacs-directory))
  (dolist (file (directory-files defuns-dir t "\\w+"))
    (when (file-regular-p file)
      (load file)))

  (when is-mac (require '_mac))
  

#+END_SRC

** Packages

** global

** appearance
   
** key bindings
   
** mac

